[
  {
    "objectID": "using_maggeo.html",
    "href": "using_maggeo.html",
    "title": "Using MagGeo",
    "section": "",
    "text": "1. Run MagGeo using the sample data.\nMagGeo can be excuted using the same terminal you have been using in the previous steps. If you want to get familiar with MagGeo and get an annotated GPS trajectory using the data we have included as an example (data folder), run the following command (replace your virES token where is requiered):\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\nNow MagGeo will start to download the Swarm Data.\n\n\n\nimg\n\n\nOnce the data has been downloaded, MagGeo will process it to make the annotation process ( for more information about how this is done, visit our methodological paper in Movement Ecology)\nThe last step MagGeo does is annotating the gathered data, that would take more time depending how big is your dataset. In our example it only takes 4 seconds.\n\n\n\nimg\n\n\nAnd Congrats you got annotated data. The results will be stored in the folder results for your futher analysis. You will find a .csv file named like GeoMagResult_+name_of_your_csv_file_trajectory.\n\n\n2. Run MagGeo using your data.\nIf you are ready to annotate your GPS trajectories. You need to update the parameters file in MagGeo to let the program know what are the correct values of your data.\n\nCopy the csv file with your trajectories into the data folder.\nOpen and Update the following parameters in the file default.yml located in parameters folder:\ngpsfilename: \"name_of_your_trajectory.cvs\" Include the name of your Input data. The GPS trajectory you need to annotate with the geomagnetic satellite data.\nLat: \"latitude_column_name_in_your_trajectory\"\nLong: \"longitude_column_name_in_your_trajectory\"\nDateTime: \"Date_Time_column_name_in_your_trajectory\" make sure you have one column that includes Date and Time values together.\naltitude: \"altitude_column_name_in_your_trajectory\" if you do not have any altitute column, you can leave that in blank, including only \"\"\n\nSave your changes, return to the Terminal and run:\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\n\n\n3. Run MagGeo step by step, using Jupyter Notebook.\nMagGeo includes a set of Jupyter Notebooks, you will find four notebooks (.ipynp) in the Notebooks folder.\n\nIn a Terminal, make sure you are using MagGeoEnv environment, and run:\n\njupyter notebook\nA Jupyter Notebook dashboard will comes out in your browser locally (e.g. http://localhost:8888) then you can explore MagGeo and its content. Go to Notebooks folder and open any of the following notebook for a step by step process. You can add cells to make your own test or analysis, but be aware that any change you do at the code migth affects the correct performance of the program.\n\n\n\nimg\n\n\n\n\nMain Notebook : An initial and descriptive notebook where you can get detail information about MagGeo, the sample data used, background concepts and software requirements.\nSequential Mode: Annotation Notebook applying a sequential mode. Using a traditional loop to going through the GPS track rows and process every row computing the magnetic components. Particularly useful for small datasets.\nParallel Mode: If you have a “big” dataset ( e.g. 1 million of records) you might want try the parallel mode. The parallel mode has some differences when you run the required libraries in a windows or Linux environment. We have tested MagGeo in a windows server environment.\nNotebook basics: If you are not familiar with Jupiter Notebooks and want to learn about the basics over how to run the notebooks before try the annotate tool. You can try this notebook to get the basics elements to run cells, read data, and plot some a basic chart.\n\n\nThe following image will help you to understand how the sequential and parallel mode differ, and how in parallel mode you should be able to use the full capacity of your machine. However it is quite important to identify when we need to use a parallel mode. For small datasets running MagGeo in Parallel mode could be even slower than the sequential mode."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Command prompt does not find conda: After step No 3, windows users do not find conda command.\nCause: The miniconda/anaconda path is not included in your %PATH environment\nSolution: Add miniconda path to Windows environment. Instructions: https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\nUsually located in C:\\ProgramData\\Miniconda3\\condabin You should search for file conda.bat and copy the path where this file is.\nPython not found: Before step step 7, for windows users in some cases python command is not found.\nCause: In some cases for windows users, when python is installed using MagGeoEnv, the path is not included. Solution: Add the conda python path to your environment\nC:\\ProgramData\\Miniconda3"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "What’s MagGeo\n\nMagGeo is a tool that helps ecologists or animal movement researchers to link earth’s magnetic field data from satellite source to GPS trajectories. Inspired by the Environmental Data Automated Track Annotation System (Env-DATA) Service a tool from Movebank and help researcher to get a better understanding about the geomagnetic variations across the GPS trajectories.\nMagGeo is entirely built-in python and using a set of Jupyter Notebooks that offer several ways to link GPS tracks with the geomagnetic components using the data from one of the up-to-date satellite sources - Swarm Constellation. MagGeo will create an enriched GPS track with the following components:\n\nLatitude from the GPS Track.\nLongitude from the GPS Track.\nTimestamp from the GPS Track.\nMagnetic Field Intensity mapped as Fgps in nanoTeslas (nT).\nN (Northwards) component mapped as N in nanoTeslas (nT).\nE (Eastwards) component mapped as E. in nanoteslas (nT).\nC (Downwards or Center) component mapped as C in nanoTeslas (nT).\nHorizontal component mapped as H in nanoTeslas (nT).\nMagnetic Declination or dip angle mapped as D in degrees\nMagnetic Inclination mapped as I in degrees\nKp Index mapped as kp\nTotal Points as the amount of Swarm measures included in the ST-IDW process from the trajectories requested in the three satellites.\nMinimum Distance mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.\nAverage Distance mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.\n\nResearchers, particularly ecologists now can study the annotated table to analyze the geomagnetic Spatio-temporal variation across any GPS trajectory.\n\n\nProblems? Suggestions? - Contact us\nMagGeo is work in progress and we are constantly making improvements that you can follow up with the commits made in the pubic GitHub repo. For general enquiries, scientific concepts, suggestions please email: fbenitez@turing.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca\nFor errors, or improvements please submit an issue in this repo, describing the problem you have."
  },
  {
    "objectID": "installation.html#install-miniconda",
    "href": "installation.html#install-miniconda",
    "title": "Installation",
    "section": "1. Install Miniconda",
    "text": "1. Install Miniconda\nRecommended setup if starting without Python already\nInstall Miniconda: https://docs.conda.io/en/latest/miniconda.html"
  },
  {
    "objectID": "installation.html#clone-the-maggeo-repository",
    "href": "installation.html#clone-the-maggeo-repository",
    "title": "Installation",
    "section": "2. Clone the MagGeo repository:",
    "text": "2. Clone the MagGeo repository:\n\nYou will need Git (version control system) to clone MagGeo, install first accordingly (https://git-scm.com/downloads)\n\nOpen a new terminal (MacOS, Linux) or command prompt (Windows) and run:\ngit clone https://github.com/MagGeo/MagGeo-Annotation-Program.git"
  },
  {
    "objectID": "installation.html#change-the-directory",
    "href": "installation.html#change-the-directory",
    "title": "Installation",
    "section": "3. Change the directory",
    "text": "3. Change the directory\nYou will need to change the directory to where you cloned/downloaded the MagGeo repository. If you donwloaded it–Do not forget to unzip the folder before using it. If you’re using the terminal on Linux or macOS, it is the same syntax to change directory.\ncd MagGeo-Annotation-Program"
  },
  {
    "objectID": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "href": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "title": "Installation",
    "section": "4. Create MagGeoEnv environment – this should take around five minutes.",
    "text": "4. Create MagGeoEnv environment – this should take around five minutes.\nWe have create a new virtual environment for you, thus you can keep MagGeo isolated from other python environment you might have. In the terminal run:\nconda env create --file environment.yml"
  },
  {
    "objectID": "installation.html#activate-maggeoenv",
    "href": "installation.html#activate-maggeoenv",
    "title": "Installation",
    "section": "5. Activate MagGeoEnv",
    "text": "5. Activate MagGeoEnv\nconda activate MagGeoEnv"
  },
  {
    "objectID": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "href": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "title": "Installation",
    "section": "6. Sign Up at VirES for Swarm - VRE and get a web client Token",
    "text": "6. Sign Up at VirES for Swarm - VRE and get a web client Token\nMagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualization for ESA’s magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models.\n\nFirst to all you need to create an account and Sign up using https://vires.services/oauth/accounts/signup/\nOnce you have created the account, Log In https://vires.services/\nFollow the instructions in https://viresclient.readthedocs.io/en/latest/access_token.html to get your token.\nCopy and Paste your token after –token in the following command"
  },
  {
    "objectID": "SequentialMode.html#overview",
    "href": "SequentialMode.html#overview",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Overview",
    "text": "Overview\nThis Jupyter Notebook will guide you through the required steps to annotate your GPS tracking data with the earth’s magnetic field data from Swarm (European Space Agency). This version is called Sequential Mode, alternatively you can use Parallel Mode to take advantage of parallelized computing if required. More information about the Swarm satellites can be found in the Main Document on the MagGeo github repository. This script will use a sequential loop to run the annotation process for each GPS Point (row) from your data.\nTo execute the code, you can go through each cell (pressing Crtl+Enter), you will also find inner comments ## to describe each particular step. If you are not familiar with using Jupyter Notebooks, you might want to take some time to learn how first, for example take a look at the notebook-basics.ipynb Notebook inside MagGeo."
  },
  {
    "objectID": "SequentialMode.html#data-requirements",
    "href": "SequentialMode.html#data-requirements",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Data requirements",
    "text": "Data requirements\n\n🔎 Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). Optionally an altitude column can be used providing altitude (the altitude must be in km). Other Columns will be ignored. Here it is an example of how your GPS track should look:\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook."
  },
  {
    "objectID": "SequentialMode.html#import-the-required-python-libraries",
    "href": "SequentialMode.html#import-the-required-python-libraries",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Import the required python libraries",
    "text": "Import the required python libraries\n\nimport datetime as dt\nfrom datetime import timedelta\nimport sys, os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom viresclient import set_token\nsys.path.append(\"..\")\n\nimport utilities\nfrom utilities.MagGeoFunctions import getGPSData\nfrom utilities.MagGeoFunctions import Get_Swarm_residuals\nfrom utilities.MagGeoFunctions import ST_IDW_Process\nfrom utilities.MagGeoFunctions import CHAOS_ground_values"
  },
  {
    "objectID": "SequentialMode.html#add-your-vires-web-client-token",
    "href": "SequentialMode.html#add-your-vires-web-client-token",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Add your VirES web client Token",
    "text": "Add your VirES web client Token\nThe VirES client API, requires a token. Before start you need to get your own VirES token. You can visit https://vires.services/ to get yours, and then add it into the next cell.\n\nset_token(\"https://vires.services/ows\", set_default=True)"
  },
  {
    "objectID": "SequentialMode.html#read-the-gps-track",
    "href": "SequentialMode.html#read-the-gps-track",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Read the GPS track",
    "text": "Read the GPS track\nThe following steps will load the GPS track from a csv file, and set some requirements before downloading geomagnetic data from Swarm. If your csv track file doesnt not have any altitude attribute, MagGeo will use sea level as your altitude (i.e., 0 Km). Altitude column units must be Km\n\nbase_dir=os.path.dirname(os.getcwd())\ntemp_results_dir = os.path.join(base_dir, \"temp_data\")\nresults_dir = os.path.join(base_dir, \"results\")\ndata_dir = os.path.join(base_dir, \"data\")\nutilities_dir = os.path.join(base_dir, \"utilities\")\n\n\n# Make sure the csv file of your trackectory is stored in the Data folder.\n# Enter the name of your GPS track csv file including the extension .csv  and press Enter (e.g. BirdGPSTrajectory.csv)\n# Make sure you have a columnn that integrates date and time, before include in MagGeo.\n# If your csv track file does not have any altitude attribute, MagGeo will use sea level as your altitude (i.e. 0 Km).\n# i.e height (Only in KM)\ngpsfilename= \"BirdGPSTrajectoryTest.csv\"\nLat=\"location-lat\"\nLong=\"location-long\"\nDateTime=\"timestamp\"\naltitude = \"height\"\n\n\n# Here MagGeo is reading your CSV file, taking the Lat, Long, Date&Time and Altitutes attributes and compute, some aditional attrubutes we need to the annotation process.\n# Setting the date and time attributes for the required format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated.\nGPSData = getGPSData(data_dir,gpsfilename,Lat,Long,DateTime,altitude)\nGPSData"
  },
  {
    "objectID": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "href": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the correct amount of Swarm measures",
    "text": "Validate the correct amount of Swarm measures\nThe following loop is identifiying the time and validating if the time is less than 4:00 hours and more than 20:00 hours to bring one extra day of data. The result of this validation is written in an empty python list which will be later validated to get the unique dates. This avoids duplicate downloading of data for the same day and reduces overall computational time.\n\ndatestimeslist = []\nfor index, row in GPSData.iterrows():\n    datetimerow  = row['gpsDateTime']\n    daterow = row['dates']\n    hourrow = row['times']\n    hourrow = hourrow.strftime('%H:%M:%S')\n    if hourrow < '04:00:00':\n        date_bfr = daterow - (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(date_bfr)\n    if hourrow > '20:00:00':\n        Date_aft = daterow + (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(Date_aft)  \n    else:\n        datestimeslist.append(daterow)\n\nGetting a list of unique dates to download the Swarm Data\n\ndef uniquelistdates(list): \n    x = np.array(list) \n    uniquelist = np.unique(x)\n    return uniquelist\n\nuniquelist_dates = uniquelistdates(datestimeslist)\nuniquelist_dates"
  },
  {
    "objectID": "SequentialMode.html#download-swarm-residuals-data",
    "href": "SequentialMode.html#download-swarm-residuals-data",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Download Swarm residuals data",
    "text": "Download Swarm residuals data\nOnce the date and time columns have been defined and the unique dates are identified the script can start the download process. Usually the data from Swarm is requested using only one satellite, however MagGeo will use the magnetic measures from the three satellite of the Swarm Mission (Alpha, Bravo, Charlie). Be aware satellite Charlie, got its AMS broken earlier in the mission, although the initial dates still have valid data MagGeo can use.\n\n📘 Be aware: Due to the amount of dates in the demo GPS track (42 days), the time to process the sample data will take approximately 10 minutes. Unfortunatly the download process migth be a slow process, particually for the magnetic models data MagGeo requieres.\n\nSet a connection to the VirES client and using the function Get_Swarm_residuals we will get the swarm residuals for the dates included in the previous list.\n\n%%time\n\nhours_t_day = 24 #MagGeo needs the entire Swarm data for each day of the identified day.\nhours_added = dt.timedelta(hours = hours_t_day)\n\nlistdfa = []\nlistdfb = []\nlistdfc = []\n\nfor d in tqdm(uniquelist_dates, desc=\"Getting Swarm Data\"):\n    #print(\"Getting Swarm data for date:\",d )\n    startdate = dt.datetime.combine(d, dt.datetime.min.time())\n    enddate = startdate + hours_added\n    SwarmResidualsA,SwarmResidualsB,SwarmResidualsC = Get_Swarm_residuals(startdate, enddate)\n    listdfa.append(SwarmResidualsA)\n    listdfb.append(SwarmResidualsB)\n    listdfc.append(SwarmResidualsC)\n\nConcat the previous results and temporally save the requested data locally: Integrate the previous list for all dates, into pandas dataframes. We will temporally saved the previous results, in case you need to re-run MagGeo, with the following csv files you will not need to run the download process.\n\n%%time\n\nPdSwarmRes_A = pd.concat(listdfa, join='outer', axis=0)\nPdSwarmRes_A.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_A.csv'), header=True)\nPdSwarmRes_B = pd.concat(listdfb, join='outer', axis=0)\nPdSwarmRes_B.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_B.csv'), header=True)\nPdSwarmRes_C = pd.concat(listdfc, join='outer', axis=0)\nPdSwarmRes_C.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_C.csv'), header=True)\n\nTotalSwarmRes_A = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_A.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_A['timestamp'] = pd.to_datetime(TotalSwarmRes_A['timestamp'])\nTotalSwarmRes_B = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_B.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_B['timestamp'] = pd.to_datetime(TotalSwarmRes_B['timestamp'])\nTotalSwarmRes_C = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_C.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_C['timestamp'] = pd.to_datetime(TotalSwarmRes_C['timestamp'])\n\nTotalSwarmRes_A.head(10) #If you need to take a look of the Swarm Data, you can print TotalSwarmRes_B, or TotalSwarmRes_C"
  },
  {
    "objectID": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "href": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Spatio-Temporal filter and interpolation process (ST-IDW)",
    "text": "Spatio-Temporal filter and interpolation process (ST-IDW)\nOnce we have requested the swarm data, now we need to filter in space and time the available points to compute the magnetic values (NEC frame) for each GPS point based on its particular date and time. The function ST_IDW_Process takes the GPS track and the downloaded data from swarm to filter in space and time based on the criteria defined in our method. With the swarm data filtered we interpolate (IDW) the NEC components for each GPS data point.\n\n%%time\n#Sequential mode, applying a traditional loop using iterrows.\nif __name__ == '__main__':\n    dn = [] ## List used to add all the GPS points with the annotated MAG Data. See the last bullet point of this process        \n    for index, row in tqdm(GPSData.iterrows(), total=GPSData.shape[0], desc=\"Annotating the GPS Trayectory\"):\n        GPSLat = row['gpsLat']\n        GPSLong = row['gpsLong']\n        GPSDateTime = row['gpsDateTime']\n        GPSTime = row['epoch']\n        GPSAltitude = row['gpsAltitude']\n        #print(\"Process for:\", index,\"DateTime:\",GPSDateTime)\n        try:\n            result=ST_IDW_Process(GPSLat,GPSLong,GPSAltitude, GPSDateTime,GPSTime, TotalSwarmRes_A, TotalSwarmRes_B, TotalSwarmRes_C)\n            dn.append(result)\n        except:\n            #print(\"Ups!.That was a bad Swarm Point, let's keep working with the next point\")\n            result_badPoint= {'Latitude': GPSLat, 'Longitude': GPSLong, 'Altitude':GPSAltitude, 'DateTime': GPSDateTime, 'N_res': np.nan, 'E_res': np.nan, 'C_res':np.nan, 'TotalPoints':0, 'Minimum_Distance':np.nan, 'Average_Distance':np.nan}  \n            dn.append(result_badPoint)\n            continue\n\nTemporally save the ST-IDW result locally. Still MagGeo needs to run the calculation of geomagnetic components, brining the magnetic values at the altitude provided for your GPS track.\n\nGPS_ResInt = pd.DataFrame(dn)\nGPS_ResInt.to_csv (os.path.join(temp_results_dir,\"GPS_ResInt.csv\"), header=True)\nGPS_ResInt"
  },
  {
    "objectID": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "href": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Compute the magnetic components at the trajectory altitute using CHAOS model",
    "text": "Compute the magnetic components at the trajectory altitute using CHAOS model\nThe function CHAOS_ground_values is used to run the calculation of magnetic components. This adjustment requeries the magnetic components at the trajectory altitude (or at the ground level) using CHAOS (theta, phi, radial). This process also further conducts the rotation and transformation between a geocentric earth-based reference system (CHAOS) and geodetic earth-based reference system (GPS track). Once the corrected values are calculated the non-necesary columns are removed. For more information about this process go to the Main Notebook.\n\n%%time\nX_obs, Y_obs, Z_obs, X_obs_internal, Y_obs_internal, Z_obs_internal =CHAOS_ground_values(utilities_dir,GPS_ResInt)\nGPS_ResInt['N'] =pd.Series(X_obs)\nGPS_ResInt['E'] =pd.Series(Y_obs)\nGPS_ResInt['C'] =pd.Series(Z_obs)\nGPS_ResInt['N_Obs'] =pd.Series(X_obs_internal)\nGPS_ResInt['E_Obs'] =pd.Series(Y_obs_internal)\nGPS_ResInt['C_Obs'] =pd.Series(Z_obs_internal)\n\nGPS_ResInt.drop(columns=['N_res', 'E_res','C_res'], inplace=True)\nGPS_ResInt"
  },
  {
    "objectID": "SequentialMode.html#the-final-result",
    "href": "SequentialMode.html#the-final-result",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "The final result",
    "text": "The final result\nWith the NEC components for each GPS Track point, it is possible to compute the aditional magnetic components. For more information about the magnetic components and their relevance go to the main paper or notebook.\n\n<strong>📘 The annotated dataframe will include the following attributes:</strong> If you need more information about how the geomagnetic components are described go to the main MagGeo Notebook (Add Link).\n<ul>\n  <li><strong>Latitude</strong> from the GPS Track.</li>\n  <li><strong>Longitude</strong> from the GPS Track.</li>\n  <li><strong>Timestamp</strong> from the GPS Track.</li>\n  <li><strong>Magnetic Field Intensity</strong>  mapped as Fgps in nanoTeslas (nT).</li>\n  <li><strong>N (Northwards) component</strong> mapped as N in nanoTeslas (nT).</li>\n  <li><strong>E (Eastwards) component</strong> mapped as E. in nanoteslas (nT).</li>\n  <li><strong>C (Downwards or Center)</strong> component mapped as C in nanoTeslas (nT).</li>\n  <li><strong>Horizontal component</strong> mapped as H in nanoTeslas (nT).</li>\n  <li><strong>Magnetic Inclination </strong> mapped as I in degrees.</li> \n  <li><strong>Magnetic Declination or dip angle</strong> mapped as D in degrees</li>\n  <li><strong>Kp Index</strong> mapped as kp</li>\n  <li><strong>Total Points</strong> as the amount of Swarm points included in the ST-IDW process from the three satellites.</li>\n  <li><strong>Minimum Distance</strong> mapped as MinDist, representing the minimum distance from a Swarm points and each GPS point location.</li>\n  <li><strong>Average Distance</strong> mapped as AvDist, representing the average distance between the Swarm points and the GPS point location.</li>\n</ul>\n\n\n%%time\n# Having Intepolated and weighted the magnetic values, we can compute the other magnectic components. \nGPS_ResInt['H'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2))\n#check the arcgtan in python., From arctan2 is saver.\nDgpsRad = np.arctan2(GPS_ResInt['E'],GPS_ResInt['N'])\nGPS_ResInt['D'] = np.degrees(DgpsRad)\nIgpsRad = np.arctan2(GPS_ResInt['C'],GPS_ResInt['H'])\nGPS_ResInt['I'] = np.degrees(IgpsRad)\nGPS_ResInt['F'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2)+(GPS_ResInt['C']**2))\nGPS_ResInt\n\nThe previous dataframe (GPS_ResInt), MagGeo has computed the geomagnetic components for each locations and time of your CSV trajectory. Now we will finish up combining the original atributes from your CSV with the annotated results from MagGeo.\n\n%%time\noriginalGPSTrack=pd.read_csv(os.path.join(data_dir,gpsfilename))\nMagGeoResult = pd.concat([originalGPSTrack, GPS_ResInt], axis=1)\n#Drop duplicated columns. Latitude, Longitued, and DateTime will not be part of the final result.\nMagGeoResult.drop(columns=['Latitude', 'Longitude', 'DateTime'], inplace=True)\nMagGeoResult"
  },
  {
    "objectID": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "href": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Export the final results to a CSV file",
    "text": "Export the final results to a CSV file\n\n%%time\n#Exporting the CSV file\noutputfile =\"GeoMagResult_\"+gpsfilename\nexport_csv = MagGeoResult.to_csv (os.path.join(results_dir,outputfile), index = None, header=True)"
  },
  {
    "objectID": "SequentialMode.html#validate-the-results-optional",
    "href": "SequentialMode.html#validate-the-results-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the results ( Optional)",
    "text": "Validate the results ( Optional)\nTo validate the results we plot the Fgpscolumn.\n\n## Creating a copy of the results and setting the Datetime Column as dataframe index.\nValidateDF = GPS_ResInt.copy()\nValidateDF.set_index(\"DateTime\", inplace=True)\n## Plotting the F column.\nhist = ValidateDF.hist(column='F')\nplt.title('F distribution')\nplt.xlabel('F in nT')\nplt.ylabel('# of measurements')"
  },
  {
    "objectID": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "href": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Map the GPS Track using the annotated Magnetic Values (Optional)",
    "text": "Map the GPS Track using the annotated Magnetic Values (Optional)\nNow we are going to plot the annotated GPS track stored into the MagDataFinal dataframe to see the different magnetic components in a map to have a better prespective of the impact of the earth magnetic field.\n\nValidateDF.plot(kind=\"scatter\", x=\"Latitude\", y=\"Longitude\",\n    label=\"Magnetic Intensity in nT\",\n    c=\"F\", cmap=plt.get_cmap(\"gist_rainbow\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n    sharex=False #This is only needed to get the x-axis label working due to a current bug in pandas plot.\n    \n)\n\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\nplt.legend(fontsize=12)\nplt.show()\n\n\nimport geopandas\nimport geoplot\nimport hvplot.pandas\ngdf = geopandas.GeoDataFrame(ValidateDF, geometry=geopandas.points_from_xy(ValidateDF.Longitude, ValidateDF.Latitude))\ngdf.head()\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - F GeoMag Intensity',\n           geo=True,\n           c='F',\n           tiles='CartoLight',\n           frame_width=700,\n           frame_height=500)\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - I Inclination',\n           geo=True,\n           tiles='CartoLight',\n           c='I',\n           cmap='Viridis',\n           frame_width=700,\n           frame_height=500)\n\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\nax = world.plot(color='white', edgecolor='gray', figsize = (18,8))\n\nminx, miny, maxx, maxy = gdf.total_bounds\nax.set_xlim(minx, maxx)\nax.set_ylim(miny, maxy)\n\ngdf.plot(ax=ax, column='F', legend=True, \n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\n\nplt.show()\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize = (18,8))\n\nax1 = world.plot(ax=ax1, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax1.set_xlim(xlim)\nax1.set_ylim(ylim)\n\n\ngdf.plot(ax=ax1, column='F', legend=True,\n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\nax1.set_title('Magnetic Intensity - F')\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Longitude')\n\n\nax2 = world.plot( ax=ax2, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\n\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax2, column='I', legend=True, cmap='Spectral', \n         legend_kwds={'label': \" Inclination in Degrees\",\n                      'orientation': \"horizontal\"})\nax2.set_title('Inclination - I')\nax2.set_xlabel('Latitude')\nax2.set_ylabel('Longitude')"
  }
]