[
  {
    "objectID": "using_maggeo.html",
    "href": "using_maggeo.html",
    "title": "Using MagGeo",
    "section": "",
    "text": "1. Run MagGeo using the sample data.\nMagGeo can be excuted using the same terminal you have been using in the previous steps. If you want to get familiar with MagGeo and get an annotated GPS trajectory using the data we have included as an example (data folder), run the following command (replace your virES token where is requiered):\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\nNow MagGeo will start to download the Swarm Data.\n\n\n\nimg\n\n\nOnce the data has been downloaded, MagGeo will process it to make the annotation process ( for more information about how this is done, visit our methodological paper in Movement Ecology)\nThe last step MagGeo does is annotating the gathered data, that would take more time depending how big is your dataset. In our example it only takes 4 seconds.\n\n\n\nimg\n\n\nAnd Congrats you got annotated data. The results will be stored in the folder results for your futher analysis. You will find a .csv file named like GeoMagResult_+name_of_your_csv_file_trajectory.\n\n\n2. Run MagGeo using your data.\nIf you are ready to annotate your GPS trajectories. You need to update the parameters file in MagGeo to let the program know what are the correct values of your data.\n\nCopy the csv file with your trajectories into the data folder.\nOpen and Update the following parameters in the file default.yml located in parameters folder:\ngpsfilename: \"name_of_your_trajectory.cvs\" Include the name of your Input data. The GPS trajectory you need to annotate with the geomagnetic satellite data.\nLat: \"latitude_column_name_in_your_trajectory\"\nLong: \"longitude_column_name_in_your_trajectory\"\nDateTime: \"Date_Time_column_name_in_your_trajectory\" make sure you have one column that includes Date and Time values together.\naltitude: \"altitude_column_name_in_your_trajectory\" if you do not have any altitute column, you can leave that in blank, including only \"\"\n\nSave your changes, return to the Terminal and run:\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\n\n\n3. Run MagGeo step by step, using Jupyter Notebook.\nMagGeo includes a set of Jupyter Notebooks, you will find four notebooks (.ipynp) in the Notebooks folder.\n\nIn a Terminal, make sure you are using MagGeoEnv environment, and run:\n\njupyter notebook\nA Jupyter Notebook dashboard will comes out in your browser locally (e.g.¬†http://localhost:8888) then you can explore MagGeo and its content. Go to Notebooks folder and open any of the following notebook for a step by step process. You can add cells to make your own test or analysis, but be aware that any change you do at the code migth affects the correct performance of the program.\n\n\n\nimg\n\n\n\n\nMain Notebook : An initial and descriptive notebook where you can get detail information about MagGeo, the sample data used, background concepts and software requirements.\nSequential Mode: Annotation Notebook applying a sequential mode. Using a traditional loop to going through the GPS track rows and process every row computing the magnetic components. Particularly useful for small datasets.\nParallel Mode: If you have a ‚Äúbig‚Äù dataset ( e.g.¬†1 million of records) you might want try the parallel mode. The parallel mode has some differences when you run the required libraries in a windows or Linux environment. We have tested MagGeo in a windows server environment.\nNotebook basics: If you are not familiar with Jupiter Notebooks and want to learn about the basics over how to run the notebooks before try the annotate tool. You can try this notebook to get the basics elements to run cells, read data, and plot some a basic chart.\n\n\nThe following image will help you to understand how the sequential and parallel mode differ, and how in parallel mode you should be able to use the full capacity of your machine. However it is quite important to identify when we need to use a parallel mode. For small datasets running MagGeo in Parallel mode could be even slower than the sequential mode."
  },
  {
    "objectID": "how_does_it_works.html#interpolation-st-idw-and-annotation-process",
    "href": "how_does_it_works.html#interpolation-st-idw-and-annotation-process",
    "title": "How MagGeo Works",
    "section": "Interpolation (ST-IDW) and Annotation Process",
    "text": "Interpolation (ST-IDW) and Annotation Process\nOnce we have requested the data we need for each point in the GPS Track and considering we have gathered the available data from the three satellites for one day ( 24 hours, every 60 seconds around 1440 Swarm measures per satellite). Now we need to filter in space and time the available points to compute the magnetic values for each GPS point in its particular date and time. Therefore, before running the interpolation process we set four functions that will require the latitude and longitude and the epoch time of each GPS point to filter the Swarm points into what we called Space-Time Cylinder. The following picture can provide a better explanation about how the points inside the space-time cylinder are included or excluded. Figure I, shows how the R of the Space-Time cylinder is based on the GPS point latitude. Figure II, illustrate the geometric components behing the space-time cylinder where the points are filtered and included in the interpolation process. Figure B, will help you to understand how the following functions compute the required parameters Figure III shows the idea behind the interpolation process for each GPS point, requesting and processing the avaliable Swarm messuares by the three satellites. For more information about the time-space windows please read the full paper where we explain the details of it.\n\n\nüìò SwarmMagAnnotation function:\nWorking as the main function for the annotation process, this functions meets the previous functions running the space-time window filters, and the computing the ST- IDW process. This function will run a interpolation process for each GPS Point considering only the Swarm points inside the Space-Time cylinder computed by the four previous functions. The return value will be an array with the values the annotated magnetic values for the GPS point. The function will be executed inside a loop going through the GPS track. This function is the annotation process per se, and through this process at first we run the interpolation getting the magnetic values in NEC reference frame and then we compute the extra magnetic values that are useful to get a better understating of the earth‚Äôs magnetic field at this particular location, date and time.\n\nTherefore, before running the interpolation process we set four functions that will require the latitude and longitude and the epoch time of each GPS point to filter the Swarm points into what we called Space-Time Cylinder. The following picture can provide a better explanation about how the points inside the space-time cylinder are included or excluded. Figure I, shows how the R of the Space-Time cylinder is based on the GPS point latitude. Figure II, illustrate the geometric components behing the space-time cylinder where the points are filtered and included in the interpolation process. Figure B, will help you to understand how the following functions compute the required parameters Figure III shows the idea behind the interpolation process for each GPS point, requesting and processing the avaliable Swarm messuares by the three satellites. For more information about the time-space windows please read the full paper where we explain the details of it.\n\nüìò Auxiliary Functions:The function ST_IDW_Process includes 4 auxiliary functions to run the sptatial-temporal kernel\n\n\ndistance_to_GPS function: Is the function in charge to calculate the distance between each GPS Point and the Swarm Point.\n\n\nKradius function: Is the function in charge to compute the R (radius) value in the cylinder. The R value will be considered based on the latitude of each GPS Point.\n\n\nDistJ function: This function will calculate the d value as the hypotenuse created in the triangle created amount the locations of the GPS point, the location of the Swarm points and the radius value.\n\n\nDfTime_func function: This is a time function to selected the points in the range of a the DeltaTime - DT window. The Delta time window has been set as 4 hours for each satellite trajectory."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Command prompt does not find conda: After step No 3, windows users do not find conda command.\nCause: The miniconda/anaconda path is not included in your %PATH environment\nSolution: Add miniconda path to Windows environment. Instructions: https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\nUsually located in C:\\ProgramData\\Miniconda3\\condabin You should search for file conda.bat and copy the path where this file is.\nPython not found: Before step step 7, for windows users in some cases python command is not found.\nCause: In some cases for windows users, when python is installed using MagGeoEnv, the path is not included. Solution: Add the conda python path to your environment\nC:\\ProgramData\\Miniconda3"
  },
  {
    "objectID": "calculation_mag_components.html",
    "href": "calculation_mag_components.html",
    "title": "Calculation of Magnetic Components",
    "section": "",
    "text": "Swarm data provide information on the earth‚Äôs magnetic field at the orbit level, which is above the ionosphere, where geomagnetic field is affected by the electrical currents induced by the interaction of the solar wind and magnetosphere ( see the figure above to understand the vertical contributions of the earth‚Äô magentic field). This means that to obtain the values of the magnetic field on the Earth‚Äôs surface where animals are migrating, the raw measurements from Swarm need to be corrected removing the effects from the modeled values from core, crust and magnetosphere. We do this in three steps. 1. We download the swarm residuals for the GPS date, getting essentially the unmodelled ionospheric field contribution that we haven‚Äôt captured in any of the other models. 2. because at the ground level the core and crust contriutiosn are stringen than the ones at the satellite altitude, We use the CHAOS model to compute the core, crust and magnetoshpere contributions for the particular, latitude, longitude, datetime and altitude of each GPS point. 3. Finally we add those values modelled by CHAOS values with the Swarm resiuals, computing a comprenhensive magneitc values than include the stronger core and crust contributions and the unmodellled values from the satellite altitude that capture all the inoshpere field contributions. For details of this correction see Supplementary Information 1 in our main paper.\n\n\nüîé CHAOS:  It is a comprehensive field model, containing the modelled contributions of the time-varying core, the static crustal field, the average time-varying magnetosphere. We show calculation of the residuals (adding this parameter residuals=True) which means: data - CHAOS(Core+Static+Magnetosphere).\n\nThe CHAOS model is available on the server as model variables:\n\nCHAOS-Core: SH degree 1-20\nCHAOS-Static: SH degree 21-110\nCHAOS-MMA-Primary: Magnetosphere external field, SH degree 1-2\nCHAOS-MMA-Secondary: Magnetosphere internal induced field, SH degree 1-2"
  },
  {
    "objectID": "ParallelMode.html#overview",
    "href": "ParallelMode.html#overview",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Overview",
    "text": "Overview\nThis Jupyter Notebook will guide you through the required steps to annotate your GPS tracking data with the earth‚Äôs magnetic field data from Swarm (European Space Agency). This version is called Parallel Mode to take advantage of parallelized computing to process big datasets.\nTo execute the code, you can go through each cell (pressing Crtl+Enter), you will also find inner comments ## to describe each particular step. If you are not familiar with Jupyter Notebook, you migth want to take some time to learn how to use it first, for example take a look at the notebook-basics.ipynb Notebook inside MagGeo.\nFor parallel processing, there are some considerations to make:\n\nLinux and Windows environments have some differences. In windows we need to separate the functions and store them separately, then import them into a main function.\nDefining what part of the process is CPU bound and what part is I/O bound: Identify what parts of the program are I/O bound (writing or reading from the disk or network) and what part par CPU bound ( Processing capacity). To take advantage of our CPU capacity we need to identify the process where the CPU is actually doing the main Tasks."
  },
  {
    "objectID": "ParallelMode.html#data-requirements",
    "href": "ParallelMode.html#data-requirements",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Data requirements",
    "text": "Data requirements\n\nüîé Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). Optionally an altitude column can be used providing altitude (the altitude must be in km). Other Columns will be ignored. Here it is an example of how your GPS track should look:\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook."
  },
  {
    "objectID": "ParallelMode.html#import-the-requeried-libraries",
    "href": "ParallelMode.html#import-the-requeried-libraries",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Import the requeried libraries",
    "text": "Import the requeried libraries\n\nimport datetime as dt\nfrom datetime import timedelta\nimport sys, os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\n\nfrom viresclient import set_token\nsys.path.append(\"..\")\nimport utilities\nfrom utilities.MagGeoFunctions import getGPSData\nfrom utilities.MagGeoFunctions import Get_Swarm_residuals"
  },
  {
    "objectID": "ParallelMode.html#add-your-vires-web-client-token",
    "href": "ParallelMode.html#add-your-vires-web-client-token",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Add your VirES web client Token",
    "text": "Add your VirES web client Token\nThe VirES client API, requires a token. Before start you need to get your own VirES token. You can visit https://vires.services/ to get yours, and then add it into the next cell.\n\nset_token(\"https://vires.services/ows\", set_default=True)"
  },
  {
    "objectID": "ParallelMode.html#reading-the-gps-track",
    "href": "ParallelMode.html#reading-the-gps-track",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Reading the GPS track",
    "text": "Reading the GPS track\nThe following steps will load the GPS track from a csv file, and set some requirements before download the data from Swarm. Importing the GPS track. You can note that there is a folder to store the CSV file. Using os.getcwd() you can validate where the file is located.\n\nbase_dir=os.path.dirname(os.getcwd())\ntemp_results_dir = os.path.join(base_dir, \"temp_data\")\nresults_dir = os.path.join(base_dir, \"results\")\ndata_dir = os.path.join(base_dir, \"data\")\n\n\n#Make sure the csv file of your trackectory is stored in the Data folder.\n#Enter the name of your GPS track csv file including the extension .csv  and press Enter (e.g. BirdGPSTrajectory.csv)\n# Make sure you have a columnn that integrates date and time, before include in MagGeo.\n#If your csv track file does not have any altitude attribute, MagGeo will use sea level as your altitude (i.e. 0 Km).\n# i.e height (Only in KM)\n\ngpsfilename= \"BirdGPSTrajectoryTest.csv\"\nLat=\"location-lat\"\nLong=\"location-long\"\nDateTime=\"timestamp\"\naltitude = \"height\"\n\n\n# Here MagGeo is reading your CSV file, taking the Lat, Long, Date&Time and Altitutes attributes and compute, some aditional attrubutes we need to the annotation process.\n# Setting the date and time attributes for the required format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated.\nGPSData = getGPSData(data_dir,gpsfilename,Lat,Long,DateTime,altitude)\nGPSData\n\n\n\n\n  \n    \n      \n      gpsDateTime\n      gpsLong\n      gpsLat\n      gpsAltitude\n      epoch\n      dates\n      times\n    \n  \n  \n    \n      0\n      2014-09-08 05:54:00\n      68.307333\n      70.854717\n      0.000\n      1410155640\n      2014-09-08\n      05:54:00\n    \n    \n      1\n      2014-09-08 06:10:00\n      67.975050\n      70.830300\n      0.406\n      1410156600\n      2014-09-08\n      06:10:00\n    \n    \n      2\n      2014-09-08 06:26:00\n      67.752417\n      70.761717\n      0.498\n      1410157560\n      2014-09-08\n      06:26:00\n    \n    \n      3\n      2014-09-08 06:42:00\n      67.561983\n      70.686517\n      0.787\n      1410158520\n      2014-09-08\n      06:42:00\n    \n    \n      4\n      2014-09-08 07:14:00\n      67.548317\n      70.685450\n      0.337\n      1410160440\n      2014-09-08\n      07:14:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      194\n      2014-09-27 11:09:00\n      49.503800\n      67.735100\n      0.098\n      1411816140\n      2014-09-27\n      11:09:00\n    \n    \n      195\n      2014-09-27 11:25:00\n      49.503767\n      67.735100\n      0.099\n      1411817100\n      2014-09-27\n      11:25:00\n    \n    \n      196\n      2014-09-27 11:40:00\n      49.503667\n      67.735100\n      0.100\n      1411818000\n      2014-09-27\n      11:40:00\n    \n    \n      197\n      2014-09-27 11:56:00\n      49.503650\n      67.735100\n      0.100\n      1411818960\n      2014-09-27\n      11:56:00\n    \n    \n      198\n      2014-09-27 12:11:00\n      49.503617\n      67.735000\n      0.092\n      1411819860\n      2014-09-27\n      12:11:00\n    \n  \n\n199 rows √ó 7 columns\n\n\n\nSetting the date and time attributes for the requerided format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated."
  },
  {
    "objectID": "ParallelMode.html#validate-the-right-amount-of-swarm-measures",
    "href": "ParallelMode.html#validate-the-right-amount-of-swarm-measures",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the right amount of Swarm measures",
    "text": "Validate the right amount of Swarm measures\nThe following loop is identifiying the time and validating if the time is less than 4:00 hours and more than 20:00 hours to bring one extra day of data. The result of this validation is written in a empty python list which will be later validated to get the unique dates avoing to download data for the same day and reducing the the downloand time process.\n\n%%time\ndatestimeslist = []\nfor index, row in GPSData.iterrows():\n    datetimerow  = row['gpsDateTime']\n    daterow = row['dates']\n    hourrow = row['times']\n    hourrow = hourrow.strftime('%H:%M:%S')\n    if hourrow < '04:00:00':\n        date_bfr = daterow - (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(date_bfr)\n    if hourrow > '20:00:00':\n        Date_aft = daterow + (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(Date_aft)  \n    else:\n        datestimeslist.append(daterow)\n\nGetting a list of unique dates, to being used to download the Swarm Data\n\n%%time\ndef uniquelistdates(list): \n    x = np.array(list) \n    uniquelist = np.unique(x)\n    return uniquelist\n\nuniquelist_dates = uniquelistdates(datestimeslist)\nuniquelist_dates"
  },
  {
    "objectID": "ParallelMode.html#download-swarm-residuals-data",
    "href": "ParallelMode.html#download-swarm-residuals-data",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Download Swarm residuals data",
    "text": "Download Swarm residuals data\nOnce the date and time columns have been defined, and the unique dates were identified the script can start the download process. Usually the data from Swarm is requested using only one satellite, however MagGeo will use the magnetic measures from the three satellite of the Swarm Mission.\n\nüìò Be aware: Due to the amount of dates the GPS track has (42 days) to request and compute the residuals, the time to process the sample data will take approximately 10 minutes.\n\nSet a connection to the VirES client and using the function Get_Swarm_residuals we will get the swarm residuals for the dates included in the previous list.\n\n%%time\n\nhours_t_day = 24\nhours_added = dt.timedelta(hours = hours_t_day)\n\nlistdfa = []\nlistdfb = []\nlistdfc = []\n\nfor d in tqdm(uniquelist_dates, desc=\"Getting Swarm Data\"):\n    #print(\"Getting Swarm data for date:\",d )\n    startdate = dt.datetime.combine(d, dt.datetime.min.time())\n    enddate = startdate + hours_added\n    SwarmResidualsA,SwarmResidualsB,SwarmResidualsC = Get_Swarm_residuals(startdate, enddate)\n    listdfa.append(SwarmResidualsA)\n    listdfb.append(SwarmResidualsB)\n    listdfc.append(SwarmResidualsC)\n\nConcat the previous results and temporally save the requested data locally: Integrate the previous list for all dates, into pandas dataframes. We will temporally saved the previous results, in case you need to re-run MagGeo, with the following csv files you will not need to run the download process.\n\n%%time\nTotalSwarmRes_A = pd.concat(listdfa, join='outer', axis=0)\nTotalSwarmRes_A.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_A.csv'), header=True)\nTotalSwarmRes_B = pd.concat(listdfb, join='outer', axis=0)\nTotalSwarmRes_B.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_B.csv'), header=True)\nTotalSwarmRes_C = pd.concat(listdfc, join='outer', axis=0)\nTotalSwarmRes_C.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_C.csv'), header=True)\nTotalSwarmRes_A #If you need to take a look of the Swarm Data, you can print TotalSwarmRes_B, or TotalSwarmRes_C"
  },
  {
    "objectID": "ParallelMode.html#set-the-number-of-processes-and-split-the-dataframe-gpsdata-into-chunks",
    "href": "ParallelMode.html#set-the-number-of-processes-and-split-the-dataframe-gpsdata-into-chunks",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Set the number of processes, and split the dataframe (GPSData) into chunks",
    "text": "Set the number of processes, and split the dataframe (GPSData) into chunks\nWe can set the number or processess we need to dedicate for the multiprocessing mode, of course that also depends on the number of cores the machine you are using to run MagGeo. You can use multiprocessing.cpu_count() to set the number of processes as the the number of cores your machine has. Beside that we will also to split the GPS track into chucks to dedicate each core for each chuck. For more information take a look at the Home Notebook.\n\nimport multiprocessing\nimport sklearn\nfrom multiprocessing import Pool\n\nNumCores = multiprocessing.cpu_count()\ndf_chunks = np.array_split(GPSData,NumCores)\ndf_chunks\n\n[           gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 0  2014-09-08 05:54:00  68.307333  70.854717        0.000  1410155640   \n 1  2014-09-08 06:10:00  67.975050  70.830300        0.406  1410156600   \n 2  2014-09-08 06:26:00  67.752417  70.761717        0.498  1410157560   \n 3  2014-09-08 06:42:00  67.561983  70.686517        0.787  1410158520   \n 4  2014-09-08 07:14:00  67.548317  70.685450        0.337  1410160440   \n 5  2014-09-08 07:30:00  67.549433  70.685750        0.026  1410161400   \n 6  2014-09-08 07:46:00  67.530983  70.690333        0.026  1410162360   \n 7  2014-09-08 08:03:00  67.506233  70.692683        0.023  1410163380   \n 8  2014-09-08 08:34:00  67.506167  70.692533        0.022  1410165240   \n 9  2014-09-08 08:50:00  67.506383  70.692583        0.023  1410166200   \n 10 2014-09-08 09:37:00  67.501633  70.695017        0.026  1410169020   \n 11 2014-09-08 09:54:00  67.498917  70.693850        0.026  1410170040   \n 12 2014-09-08 13:53:00  67.505800  70.692667        0.000  1410184380   \n \n          dates     times  \n 0   2014-09-08  05:54:00  \n 1   2014-09-08  06:10:00  \n 2   2014-09-08  06:26:00  \n 3   2014-09-08  06:42:00  \n 4   2014-09-08  07:14:00  \n 5   2014-09-08  07:30:00  \n 6   2014-09-08  07:46:00  \n 7   2014-09-08  08:03:00  \n 8   2014-09-08  08:34:00  \n 9   2014-09-08  08:50:00  \n 10  2014-09-08  09:37:00  \n 11  2014-09-08  09:54:00  \n 12  2014-09-08  13:53:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 13 2014-09-08 14:09:00  67.505883  70.692667        0.034  1410185340   \n 14 2014-09-08 14:25:00  67.506000  70.692617        0.034  1410186300   \n 15 2014-09-08 14:41:00  67.505883  70.692750        0.033  1410187260   \n 16 2014-09-08 15:13:00  67.511617  70.694350        0.036  1410189180   \n 17 2014-09-08 15:29:00  67.509050  70.693650        0.034  1410190140   \n 18 2014-09-08 15:45:00  67.511250  70.693467        0.032  1410191100   \n 19 2014-09-08 16:01:00  67.510000  70.693450        0.033  1410192060   \n 20 2014-09-08 16:33:00  67.510767  70.693633        0.034  1410193980   \n 21 2014-09-08 16:49:00  67.509500  70.693583        0.033  1410194940   \n 22 2014-09-08 17:05:00  67.509750  70.693600        0.033  1410195900   \n 23 2014-09-08 17:38:00  67.509700  70.693633        0.035  1410197880   \n 24 2014-09-08 17:53:00  67.509650  70.693650        0.017  1410198780   \n 25 2014-09-21 12:23:00  49.996717  66.897217        0.019  1411302180   \n \n          dates     times  \n 13  2014-09-08  14:09:00  \n 14  2014-09-08  14:25:00  \n 15  2014-09-08  14:41:00  \n 16  2014-09-08  15:13:00  \n 17  2014-09-08  15:29:00  \n 18  2014-09-08  15:45:00  \n 19  2014-09-08  16:01:00  \n 20  2014-09-08  16:33:00  \n 21  2014-09-08  16:49:00  \n 22  2014-09-08  17:05:00  \n 23  2014-09-08  17:38:00  \n 24  2014-09-08  17:53:00  \n 25  2014-09-21  12:23:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 26 2014-09-21 12:55:00  49.997550  66.897567        0.030  1411304100   \n 27 2014-09-21 13:11:00  49.998683  66.898600        0.000  1411305060   \n 28 2014-09-21 13:43:00  49.997133  66.898300        0.000  1411306980   \n 29 2014-09-21 14:00:00  49.997383  66.897600        0.000  1411308000   \n 30 2014-09-21 14:17:00  49.997467  66.897517        0.000  1411309020   \n 31 2014-09-21 14:31:00  50.005250  66.895483        0.044  1411309860   \n 32 2014-09-21 15:03:00  50.040800  66.890583        0.000  1411311780   \n 33 2014-09-21 15:19:00  50.047867  66.890167        0.000  1411312740   \n 34 2014-09-21 15:35:00  50.047600  66.890150        0.000  1411313700   \n 35 2014-09-21 16:07:00  50.047800  66.890183        0.000  1411315620   \n 36 2014-09-21 16:23:00  49.961467  66.980783        0.000  1411316580   \n 37 2014-09-22 05:52:00  49.847017  66.960383        0.000  1411365120   \n 38 2014-09-22 06:08:00  49.846967  66.960450        0.000  1411366080   \n \n          dates     times  \n 26  2014-09-21  12:55:00  \n 27  2014-09-21  13:11:00  \n 28  2014-09-21  13:43:00  \n 29  2014-09-21  14:00:00  \n 30  2014-09-21  14:17:00  \n 31  2014-09-21  14:31:00  \n 32  2014-09-21  15:03:00  \n 33  2014-09-21  15:19:00  \n 34  2014-09-21  15:35:00  \n 35  2014-09-21  16:07:00  \n 36  2014-09-21  16:23:00  \n 37  2014-09-22  05:52:00  \n 38  2014-09-22  06:08:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 39 2014-09-22 06:24:00  49.846950  66.960367        0.000  1411367040   \n 40 2014-09-22 06:40:00  49.847350  66.960383        0.000  1411368000   \n 41 2014-09-22 07:13:00  49.846850  66.960400        0.000  1411369980   \n 42 2014-09-22 08:02:00  49.712750  67.096717        0.000  1411372920   \n 43 2014-09-30 06:35:00  47.120217  66.684717        0.006  1412058900   \n 44 2014-09-30 06:51:00  46.696433  66.529533        0.000  1412059860   \n 45 2014-09-30 07:07:00  46.267167  66.378733        0.000  1412060820   \n 46 2014-09-30 07:23:00  45.813017  66.230733        0.000  1412061780   \n 47 2014-09-30 08:04:00  44.659750  65.770600        0.000  1412064240   \n 48 2014-09-30 08:46:00  43.495867  65.287350        0.000  1412066760   \n 49 2014-09-30 10:10:00  41.314500  64.129950        0.000  1412071800   \n 50 2014-09-30 10:26:00  40.957017  63.896433        0.000  1412072760   \n 51 2014-09-30 11:04:00  40.313267  63.317133        0.000  1412075040   \n \n          dates     times  \n 39  2014-09-22  06:24:00  \n 40  2014-09-22  06:40:00  \n 41  2014-09-22  07:13:00  \n 42  2014-09-22  08:02:00  \n 43  2014-09-30  06:35:00  \n 44  2014-09-30  06:51:00  \n 45  2014-09-30  07:07:00  \n 46  2014-09-30  07:23:00  \n 47  2014-09-30  08:04:00  \n 48  2014-09-30  08:46:00  \n 49  2014-09-30  10:10:00  \n 50  2014-09-30  10:26:00  \n 51  2014-09-30  11:04:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 52 2014-09-30 11:21:00  40.012267  63.049433          0.0  1412076060   \n 53 2014-09-30 11:53:00  39.520267  62.547750          0.0  1412077980   \n 54 2014-09-30 12:09:00  39.286400  62.327483          0.0  1412078940   \n 55 2014-09-30 16:27:00  35.165983  59.422467          0.0  1412094420   \n 56 2014-09-30 16:59:00  34.759200  58.980250          0.0  1412096340   \n 57 2014-09-30 17:15:00  34.471817  58.817917          0.0  1412097300   \n 58 2014-09-30 17:47:00  34.448300  58.827933          0.0  1412099220   \n 59 2014-09-30 18:04:00  34.448467  58.826017          0.0  1412100240   \n 60 2014-09-30 18:20:00  34.435233  58.819850          0.0  1412101200   \n 61 2014-09-30 18:35:00  34.201167  58.727250          0.0  1412102100   \n 62 2014-09-30 19:08:00  33.569233  58.405500          0.0  1412104080   \n 63 2014-09-30 19:24:00  33.236700  58.241183          0.0  1412105040   \n 64 2014-09-30 19:40:00  33.014350  58.041567          0.0  1412106000   \n \n          dates     times  \n 52  2014-09-30  11:21:00  \n 53  2014-09-30  11:53:00  \n 54  2014-09-30  12:09:00  \n 55  2014-09-30  16:27:00  \n 56  2014-09-30  16:59:00  \n 57  2014-09-30  17:15:00  \n 58  2014-09-30  17:47:00  \n 59  2014-09-30  18:04:00  \n 60  2014-09-30  18:20:00  \n 61  2014-09-30  18:35:00  \n 62  2014-09-30  19:08:00  \n 63  2014-09-30  19:24:00  \n 64  2014-09-30  19:40:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 65 2014-09-30 19:56:00  32.698767  57.913150        0.000  1412106960   \n 66 2014-09-30 20:12:00  32.470350  57.709567        0.003  1412107920   \n 67 2014-09-30 20:28:00  32.223617  57.567683        0.002  1412108880   \n 68 2014-10-01 00:29:00  31.970950  57.454033        0.000  1412123340   \n 69 2014-10-01 00:44:00  31.971250  57.453767        0.000  1412124240   \n 70 2014-10-01 01:00:00  31.971667  57.453667        0.037  1412125200   \n 71 2014-10-01 02:42:00  31.894067  57.427383        0.038  1412131320   \n 72 2014-10-01 02:59:00  31.669200  57.321483        0.128  1412132340   \n 73 2014-10-01 03:14:00  31.446667  57.195767        0.135  1412133240   \n 74 2014-10-01 05:05:00  29.696600  56.703217        0.131  1412139900   \n 75 2014-10-01 06:19:00  28.411983  56.252417        0.127  1412144340   \n 76 2014-10-01 06:35:00  28.150767  56.085417        0.132  1412145300   \n 77 2014-10-01 07:23:00  27.264867  55.628233        0.132  1412148180   \n \n          dates     times  \n 65  2014-09-30  19:56:00  \n 66  2014-09-30  20:12:00  \n 67  2014-09-30  20:28:00  \n 68  2014-10-01  00:29:00  \n 69  2014-10-01  00:44:00  \n 70  2014-10-01  01:00:00  \n 71  2014-10-01  02:42:00  \n 72  2014-10-01  02:59:00  \n 73  2014-10-01  03:14:00  \n 74  2014-10-01  05:05:00  \n 75  2014-10-01  06:19:00  \n 76  2014-10-01  06:35:00  \n 77  2014-10-01  07:23:00  ,\n            gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 78 2014-10-01 07:40:00  26.967033  55.513917        0.132  1412149200   \n 79 2014-10-01 07:56:00  26.703400  55.396383        0.131  1412150160   \n 80 2014-10-01 11:42:00  22.913617  53.929300        0.129  1412163720   \n 81 2014-10-01 12:13:00  22.347700  53.795100        0.131  1412165580   \n 82 2014-10-01 12:29:00  22.068817  53.726433        0.129  1412166540   \n 83 2014-10-01 13:02:00  21.519500  53.613633        0.000  1412168520   \n 84 2014-10-01 13:18:00  21.238517  53.580000        0.142  1412169480   \n 85 2014-10-01 13:34:00  20.974200  53.522383        0.137  1412170440   \n 86 2014-10-01 13:50:00  20.682200  53.486600        0.136  1412171400   \n 87 2014-10-01 14:22:00  20.148067  53.381400        0.000  1412173320   \n 88 2014-10-01 14:38:00  19.858717  53.353933        0.134  1412174280   \n 89 2014-10-01 14:54:00  19.568867  53.324533        0.149  1412175240   \n 90 2014-10-01 15:26:00  18.964567  53.259633        0.145  1412177160   \n \n          dates     times  \n 78  2014-10-01  07:40:00  \n 79  2014-10-01  07:56:00  \n 80  2014-10-01  11:42:00  \n 81  2014-10-01  12:13:00  \n 82  2014-10-01  12:29:00  \n 83  2014-10-01  13:02:00  \n 84  2014-10-01  13:18:00  \n 85  2014-10-01  13:34:00  \n 86  2014-10-01  13:50:00  \n 87  2014-10-01  14:22:00  \n 88  2014-10-01  14:38:00  \n 89  2014-10-01  14:54:00  \n 90  2014-10-01  15:26:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 91  2014-10-01 15:42:00  18.664850  53.268217        0.145  1412178120   \n 92  2014-10-01 19:42:00  16.177583  53.797867        0.143  1412192520   \n 93  2014-10-01 19:57:00  16.178717  53.798633        0.136  1412193420   \n 94  2014-10-01 20:13:00  16.179067  53.798667        0.135  1412194380   \n 95  2014-10-01 20:30:00  16.179150  53.798850        0.133  1412195400   \n 96  2014-10-01 21:02:00  16.178950  53.798350        0.134  1412197320   \n 97  2014-10-01 21:18:00  16.178817  53.798350        0.146  1412198280   \n 98  2014-10-01 21:34:00  16.179200  53.798467        0.124  1412199240   \n 99  2014-10-01 21:50:00  16.178483  53.798617        0.117  1412200200   \n 100 2014-10-01 22:22:00  16.179033  53.798367        0.118  1412202120   \n 101 2014-10-01 22:38:00  16.178983  53.797933        0.119  1412203080   \n 102 2014-10-01 23:10:00  16.178733  53.798333        0.118  1412205000   \n \n           dates     times  \n 91   2014-10-01  15:42:00  \n 92   2014-10-01  19:42:00  \n 93   2014-10-01  19:57:00  \n 94   2014-10-01  20:13:00  \n 95   2014-10-01  20:30:00  \n 96   2014-10-01  21:02:00  \n 97   2014-10-01  21:18:00  \n 98   2014-10-01  21:34:00  \n 99   2014-10-01  21:50:00  \n 100  2014-10-01  22:22:00  \n 101  2014-10-01  22:38:00  \n 102  2014-10-01  23:10:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 103 2014-10-01 23:26:00  16.178650  53.798483        0.126  1412205960   \n 104 2014-10-01 23:42:00  16.179417  53.798400        0.129  1412206920   \n 105 2014-10-01 23:58:00  16.179233  53.798633        0.107  1412207880   \n 106 2014-10-02 03:42:00  16.179567  53.795533        0.108  1412221320   \n 107 2014-10-02 04:14:00  16.161283  53.889767        0.109  1412223240   \n 108 2014-10-02 05:02:00  15.977883  54.208517        0.913  1412226120   \n 109 2014-10-02 05:18:00  15.791683  54.210117        0.823  1412227080   \n 110 2014-10-02 05:35:00  15.640317  54.180867        0.010  1412228100   \n 111 2014-10-02 05:51:00  15.502350  54.150750        0.005  1412229060   \n 112 2014-10-02 06:22:00  15.502000  54.150600        0.009  1412230920   \n 113 2014-10-02 06:38:00  15.500733  54.145917        0.000  1412231880   \n 114 2014-10-02 07:26:00  15.500717  54.146000        0.000  1412234760   \n \n           dates     times  \n 103  2014-10-01  23:26:00  \n 104  2014-10-01  23:42:00  \n 105  2014-10-01  23:58:00  \n 106  2014-10-02  03:42:00  \n 107  2014-10-02  04:14:00  \n 108  2014-10-02  05:02:00  \n 109  2014-10-02  05:18:00  \n 110  2014-10-02  05:35:00  \n 111  2014-10-02  05:51:00  \n 112  2014-10-02  06:22:00  \n 113  2014-10-02  06:38:00  \n 114  2014-10-02  07:26:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 115 2014-10-02 07:43:00  15.499767  54.145750        0.000  1412235780   \n 116 2014-10-02 11:43:00  15.236950  54.089233        0.000  1412250180   \n 117 2014-10-02 11:59:00  15.236767  54.089383        0.003  1412251140   \n 118 2014-10-02 12:15:00  15.236850  54.089300        0.005  1412252100   \n 119 2014-10-02 12:31:00  15.236900  54.089283        0.381  1412253060   \n 120 2014-10-02 13:04:00  15.236850  54.089267        0.928  1412255040   \n 121 2014-10-02 13:20:00  15.236750  54.089433        0.337  1412256000   \n 122 2014-10-02 13:36:00  15.236067  54.090017        0.267  1412256960   \n 123 2014-10-02 13:52:00  15.236983  54.089300        0.357  1412257920   \n 124 2014-10-02 14:24:00  15.237417  54.089350        0.140  1412259840   \n 125 2014-10-02 14:41:00  15.236900  54.089200        0.315  1412260860   \n 126 2014-10-02 14:57:00  15.237067  54.089250        0.132  1412261820   \n \n           dates     times  \n 115  2014-10-02  07:43:00  \n 116  2014-10-02  11:43:00  \n 117  2014-10-02  11:59:00  \n 118  2014-10-02  12:15:00  \n 119  2014-10-02  12:31:00  \n 120  2014-10-02  13:04:00  \n 121  2014-10-02  13:20:00  \n 122  2014-10-02  13:36:00  \n 123  2014-10-02  13:52:00  \n 124  2014-10-02  14:24:00  \n 125  2014-10-02  14:41:00  \n 126  2014-10-02  14:57:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 127 2014-10-02 15:29:00  15.236800  54.088833        0.136  1412263740   \n 128 2014-10-02 15:45:00  15.237250  54.090200        0.133  1412264700   \n 129 2014-10-02 19:45:00  15.111483  54.130650        0.133  1412279100   \n 130 2014-10-02 20:01:00  15.111733  54.131350        0.130  1412280060   \n 131 2014-10-02 20:17:00  15.111050  54.132650        0.133  1412281020   \n 132 2014-10-02 20:34:00  15.109267  54.131633        0.133  1412282040   \n 133 2014-10-02 21:06:00  15.107017  54.133217        0.132  1412283960   \n 134 2014-10-02 21:22:00  15.106033  54.133567        0.128  1412284920   \n 135 2014-10-02 21:38:00  15.103083  54.134050        0.124  1412285880   \n 136 2014-10-02 21:54:00  15.101467  54.133400        0.129  1412286840   \n 137 2014-10-02 22:26:00  15.096867  54.132917        0.132  1412288760   \n 138 2014-10-02 22:42:00  15.093067  54.133083        0.130  1412289720   \n \n           dates     times  \n 127  2014-10-02  15:29:00  \n 128  2014-10-02  15:45:00  \n 129  2014-10-02  19:45:00  \n 130  2014-10-02  20:01:00  \n 131  2014-10-02  20:17:00  \n 132  2014-10-02  20:34:00  \n 133  2014-10-02  21:06:00  \n 134  2014-10-02  21:22:00  \n 135  2014-10-02  21:38:00  \n 136  2014-10-02  21:54:00  \n 137  2014-10-02  22:26:00  \n 138  2014-10-02  22:42:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 139 2014-10-02 23:30:00  15.093517  54.138450        0.130  1412292600   \n 140 2014-10-02 23:46:00  15.094350  54.139350        0.133  1412293560   \n 141 2014-10-03 03:47:00  15.093983  54.146717        0.128  1412308020   \n 142 2014-10-03 04:03:00  15.095067  54.147683        0.134  1412308980   \n 143 2014-10-03 04:19:00  15.098000  54.149517        0.128  1412309940   \n 144 2014-10-03 04:35:00  15.104433  54.147617        0.119  1412310900   \n 145 2014-10-03 05:23:00  15.152317  54.096800        0.121  1412313780   \n 146 2014-10-03 05:39:00  15.190917  54.093067        0.132  1412314740   \n 147 2014-10-03 05:55:00  15.197550  54.096967        0.133  1412315700   \n 148 2014-10-03 06:27:00  15.243367  54.089450        0.135  1412317620   \n 149 2014-10-03 06:43:00  15.243600  54.089300        0.135  1412318580   \n 150 2014-10-03 06:59:00  15.244167  54.089067        0.133  1412319540   \n \n           dates     times  \n 139  2014-10-02  23:30:00  \n 140  2014-10-02  23:46:00  \n 141  2014-10-03  03:47:00  \n 142  2014-10-03  04:03:00  \n 143  2014-10-03  04:19:00  \n 144  2014-10-03  04:35:00  \n 145  2014-10-03  05:23:00  \n 146  2014-10-03  05:39:00  \n 147  2014-10-03  05:55:00  \n 148  2014-10-03  06:27:00  \n 149  2014-10-03  06:43:00  \n 150  2014-10-03  06:59:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 151 2014-10-03 07:15:00  15.244133  54.089417        0.133  1412320500   \n 152 2014-10-03 07:33:00  15.244200  54.089733        0.133  1412321580   \n 153 2014-10-03 07:47:00  15.243783  54.089867        0.130  1412322420   \n 154 2014-10-03 11:49:00  15.238017  54.089583        0.136  1412336940   \n 155 2014-10-03 12:05:00  15.238167  54.089050        0.158  1412337900   \n 156 2014-10-03 12:22:00  15.238100  54.088700        0.158  1412338920   \n 157 2014-10-03 12:37:00  15.236933  54.088900        0.160  1412339820   \n 158 2014-10-03 13:10:00  15.237350  54.089000        0.162  1412341800   \n 159 2014-10-03 13:26:00  15.237433  54.089017        0.109  1412342760   \n 160 2014-10-03 13:42:00  15.237433  54.088983        0.099  1412343720   \n 161 2014-10-03 13:58:00  15.237433  54.088983        0.106  1412344680   \n 162 2014-10-03 14:30:00  15.236800  54.088517        0.101  1412346600   \n \n           dates     times  \n 151  2014-10-03  07:15:00  \n 152  2014-10-03  07:33:00  \n 153  2014-10-03  07:47:00  \n 154  2014-10-03  11:49:00  \n 155  2014-10-03  12:05:00  \n 156  2014-10-03  12:22:00  \n 157  2014-10-03  12:37:00  \n 158  2014-10-03  13:10:00  \n 159  2014-10-03  13:26:00  \n 160  2014-10-03  13:42:00  \n 161  2014-10-03  13:58:00  \n 162  2014-10-03  14:30:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 163 2014-10-03 14:47:00  15.236733  54.088233        0.105  1412347620   \n 164 2014-10-03 15:35:00  15.237633  54.088950        0.101  1412350500   \n 165 2014-10-03 15:51:00  15.243483  54.091083        0.108  1412351460   \n 166 2014-10-03 19:52:00  14.787900  54.018417        0.103  1412365920   \n 167 2014-10-03 20:08:00  14.787250  54.018517        0.104  1412366880   \n 168 2014-10-03 20:24:00  14.786450  54.018783        0.101  1412367840   \n 169 2014-10-03 20:40:00  14.785433  54.019250        0.113  1412368800   \n 170 2014-10-03 21:28:00  14.784967  54.019617        0.127  1412371680   \n 171 2014-10-03 21:44:00  14.786017  54.018650        0.123  1412372640   \n 172 2014-10-03 22:00:00  14.785600  54.018983        0.123  1412373600   \n 173 2014-10-03 22:32:00  14.784983  54.020017        0.104  1412375520   \n 174 2014-10-03 22:48:00  14.785433  54.020367        0.099  1412376480   \n \n           dates     times  \n 163  2014-10-03  14:47:00  \n 164  2014-10-03  15:35:00  \n 165  2014-10-03  15:51:00  \n 166  2014-10-03  19:52:00  \n 167  2014-10-03  20:08:00  \n 168  2014-10-03  20:24:00  \n 169  2014-10-03  20:40:00  \n 170  2014-10-03  21:28:00  \n 171  2014-10-03  21:44:00  \n 172  2014-10-03  22:00:00  \n 173  2014-10-03  22:32:00  \n 174  2014-10-03  22:48:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 175 2014-10-03 23:04:00  14.785533  54.020600        0.099  1412377440   \n 176 2014-10-03 23:20:00  14.785650  54.021083        0.098  1412378400   \n 177 2014-10-03 23:36:00  14.785433  54.021517        0.098  1412379360   \n 178 2014-10-03 23:52:00  14.785767  54.021817        0.103  1412380320   \n 179 2014-10-04 03:53:00  14.778733  54.025167        0.103  1412394780   \n 180 2014-10-04 04:09:00  14.778000  54.025550        0.104  1412395740   \n 181 2014-10-04 04:25:00  14.777683  54.025383        0.096  1412396700   \n 182 2014-10-04 04:41:00  14.778167  54.025033        0.104  1412397660   \n 183 2014-10-04 05:29:00  14.780733  53.994583        0.099  1412400540   \n 184 2014-10-04 05:45:00  14.780900  53.994617        0.098  1412401500   \n 185 2014-10-04 06:01:00  14.780883  53.994533        0.099  1412402460   \n 186 2014-10-04 06:33:00  14.780950  53.994300        0.098  1412404380   \n \n           dates     times  \n 175  2014-10-03  23:04:00  \n 176  2014-10-03  23:20:00  \n 177  2014-10-03  23:36:00  \n 178  2014-10-03  23:52:00  \n 179  2014-10-04  03:53:00  \n 180  2014-10-04  04:09:00  \n 181  2014-10-04  04:25:00  \n 182  2014-10-04  04:41:00  \n 183  2014-10-04  05:29:00  \n 184  2014-10-04  05:45:00  \n 185  2014-10-04  06:01:00  \n 186  2014-10-04  06:33:00  ,\n             gpsDateTime    gpsLong     gpsLat  gpsAltitude       epoch  \\\n 187 2014-10-04 06:49:00  14.780833  53.994033        0.103  1412405340   \n 188 2014-10-04 07:38:00  14.778800  53.993117        0.103  1412408280   \n 189 2014-10-04 07:53:00  14.718333  53.959217        0.103  1412409180   \n 190 2014-08-30 12:39:00  75.312300  71.454100        0.101  1409402340   \n 191 2014-08-30 14:42:00  75.347050  71.463450        0.102  1409409720   \n 192 2014-08-30 18:49:00  75.379600  71.457583        0.103  1409424540   \n 193 2014-09-27 10:54:00  49.504100  67.734967        0.100  1411815240   \n 194 2014-09-27 11:09:00  49.503800  67.735100        0.098  1411816140   \n 195 2014-09-27 11:25:00  49.503767  67.735100        0.099  1411817100   \n 196 2014-09-27 11:40:00  49.503667  67.735100        0.100  1411818000   \n 197 2014-09-27 11:56:00  49.503650  67.735100        0.100  1411818960   \n 198 2014-09-27 12:11:00  49.503617  67.735000        0.092  1411819860   \n \n           dates     times  \n 187  2014-10-04  06:49:00  \n 188  2014-10-04  07:38:00  \n 189  2014-10-04  07:53:00  \n 190  2014-08-30  12:39:00  \n 191  2014-08-30  14:42:00  \n 192  2014-08-30  18:49:00  \n 193  2014-09-27  10:54:00  \n 194  2014-09-27  11:09:00  \n 195  2014-09-27  11:25:00  \n 196  2014-09-27  11:40:00  \n 197  2014-09-27  11:56:00  \n 198  2014-09-27  12:11:00  ]"
  },
  {
    "objectID": "ParallelMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "href": "ParallelMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Spatio-Temporal filter and Interpolation process (ST-IDW)",
    "text": "Spatio-Temporal filter and Interpolation process (ST-IDW)\nOnce we have requested the swarm data, now we need to filter in space and time the available points to compute the magnetic values (NEC frame) for each GPS point based on its particular date and time. The function ST_IDW_Process imported in the row_handler, takes the GPS track and the downloaded data from swarm to filter in space and time based on the criteria defined in our method. With the swarm data filtered we interpolated (IDW) the NEC components for each GPS data point, based on the latitude, date, time and number of Swarm points filtered.\nThe function CHAOS_ground_values, inside the MagGeoFunctions file, is used to run the Calculation of magnetic components. This calculation requeries the magnetic components at the trajectory altitude (or at the ground level) using CHAOS (theta, phi, radial). This process include a rotation and transformation between a geocentric frame (CHAOS) and geodetic frame (GPS track). Once the corrected values are calculated, are included in the GPS track, and the non-necesary columns are removed. For more information about this process go to the Main Notebook.\n\nRun the (ST-IDW) process in parallel mode\nAlthough the next cell seems to run a small main function. What is happening is a call for several functions running at same time for several cores. Initially we set a pool of processes. Using the pool class we will distribute the assigned function among the data chucks we created. Every data chunk will be like a subset of the entire GPS track. So we need to iterate among data chunk. And inside every data chunk we need to identify the datetime, epoch, altitude, latitude and longitude of each row to run the interpolation & annotation process using the Swarm data we have filtered and stored in the previous steps.\nThe function in charge to distribute the required function (row_handler) among the data chunks is the map function from the pool class.\nrow_handler.py is an interows iteration to get the required parameter for the ST_IDW_Process function.\n\nüìò Auxiliary Functions:\n\n\nST_IDW_Process function: This is the main function in charge to read the Swarm Data already filtered, and then import DfTime_func, distance_to_GPS, Kradius , DistJ functions to compute the spatial-time cylinder and the annotation process. The return of this function is a row (dictionary) that will be appended into a python list where all the results from the different cores. The python list from every process is concatenated into a pandas dataframe in the main function having there the whole chain of the parallel process.\n\n\ndistance_to_GPS function: Is the function in charge to calculate the distance between each GPS Point and the Swarm Point.\n\n\nKradius function: Is the function in charge to compute the R (radius) value in the cylinder. The R value will be considered based on the latitude of each GPS Point.\n\n\nDistJ function: This function will calculate the d value as the hypotenuse created in the triangle created amount the locations of the GPS point, the location of the Swarm points and the radius value.\n\n\nDfTime_func function: This is a time function to selected the points in the range of a the DeltaTime - DT window. The Delta time window has been set as 4 hours for each satellite trajectory.\n\n\nCHAOS_ground_values function: This is the calculation of geomagnetic components function to get the CHAOS magnetic values and process the Nres,Eres,Cres values and transform them into the N,E,C values at the GPS altitude.\n\n\n\n\n%%time\nfrom functools import partial\nfrom utilities.row_handler import row_handler\n\nif __name__ == '__main__':\n    with multiprocessing.Pool(NumCores) as pool:\n        GeoMagParallelResult = pd.concat(pool.map(partial(row_handler),df_chunks), ignore_index=True)\n\nAnnotating the GPS Trayectory: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 12/12 [00:00<00:00, 18.64it/s]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCPU times: user 245 ms, sys: 265 ms, total: 510 ms\nWall time: 17.5 s\n\n\nWith the Parallel mode the Annotation process takes about 12 seconds to complete ( We had tested the parallel process in a windows server machine with 12 cores, see the image bellow). With the same GPS track in the sequetial mode the process is complete in about 2 minutes. In the image bellow you can see how the machine create several python processes and all cores (full CPU capacity) is taken.\n\nüîà Multiprocessing:\nis even more powerfull when you have to process a big amount of data (e.g.¬†2 millons of points). Although here is making a notable improvement if you have to process a big dataset the parallelization makes even more sense.\nBe aware that there is no output cell in here, you can follow the parallelization progress in the Anaconda Prompt."
  },
  {
    "objectID": "ParallelMode.html#the-final-result",
    "href": "ParallelMode.html#the-final-result",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "The final result",
    "text": "The final result\nWith the NEC components for each GPS Track point, it is possible to compute the aditional magnetic components. For more information about the magnetic components and their relevance go to the main paper or notebook.\n\n<strong>üìò The annotated dataframe will include the following attributes:</strong> If you need more information about how the geomagnetic component are described go to the main MagGeo Notebook (Add Link).\n<ul>\n  <li><strong>Latitude</strong> from the GPS Track.</li>\n  <li><strong>Longitude</strong> from the GPS Track.</li>\n  <li><strong>Timestamp</strong> from the GPS Track.</li>\n  <li><strong>Magnetic Field Intensity</strong>  mapped as Fgps in nanoTeslas (nT).</li>\n  <li><strong>N (Northwards) component</strong> mapped as N in nanoTeslas (nT).</li>\n  <li><strong>E (Eastwards) component</strong> mapped as E. in nanoteslas (nT).</li>\n  <li><strong>C (Downwards or Center)</strong> component mapped as C in nanoTeslas (nT).</li>\n  <li><strong>Horizontal component</strong> mapped as H in nanoTeslas (nT).</li>\n  <li><strong>Magnetic Inclination </strong> mapped as I in degrees.</li> \n  <li><strong>Magnetic Declination or dip angle</strong> mapped as D in degrees</li>\n  <li><strong>Kp Index</strong> mapped as kp</li>\n  <li><strong>Total Points</strong> as the amount of Swarm messuares included in the ST-IDW process from the trajectories requested in the three satellites.</li>\n  <li><strong>Minimum Distance</strong> mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.</li>\n  <li><strong>Average Distance</strong> mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.</li>\n</ul>\n\n\n#14. Having Intepolated and weigth magnetic values, we can compute the other magnectic components. \nGeoMagParallelResult['H'] = np.sqrt((GeoMagParallelResult['N']**2)+(GeoMagParallelResult['E']**2))\n#check the arcgtan in python., From arctan2 is saver.\nDgpsRad = np.arctan2(GeoMagParallelResult['E'],GeoMagParallelResult['N'])\nGeoMagParallelResult['D'] = np.degrees(DgpsRad)\nIgpsRad = np.arctan2(GeoMagParallelResult['C'],GeoMagParallelResult['H'])\nGeoMagParallelResult['I'] = np.degrees(IgpsRad)\nGeoMagParallelResult['F'] = np.sqrt((GeoMagParallelResult['N']**2)+(GeoMagParallelResult['E']**2)+(GeoMagParallelResult['C']**2))\nGeoMagParallelResult\n\n\n\n\n  \n    \n      \n      Latitude\n      Longitude\n      Altitude\n      DateTime\n      TotalPoints\n      Minimum_Distance\n      Average_Distance\n      Kp\n      N\n      E\n      C\n      N_Obs\n      E_Obs\n      C_Obs\n      H\n      D\n      I\n      F\n    \n  \n  \n    \n      0\n      70.854717\n      68.307333\n      0.000\n      2014-09-08 05:54:00\n      46\n      327.950987\n      665.008368\n      1.308696\n      6949.075221\n      3851.112405\n      57703.184834\n      6970.420967\n      3838.494559\n      57689.934814\n      7944.854510\n      28.994810\n      82.160529\n      58247.560062\n    \n    \n      1\n      70.830300\n      67.975050\n      0.406\n      2014-09-08 06:10:00\n      46\n      340.038476\n      667.146029\n      1.308696\n      6985.622920\n      3866.290909\n      57644.882192\n      7006.455690\n      3854.336448\n      57631.552162\n      7984.180169\n      28.962950\n      82.114343\n      58195.185161\n    \n    \n      2\n      70.761717\n      67.752417\n      0.498\n      2014-09-08 06:26:00\n      55\n      348.223318\n      678.815409\n      1.190909\n      7035.516299\n      3877.393141\n      57609.773161\n      7053.372261\n      3867.299155\n      57596.673601\n      8033.222713\n      28.859910\n      82.061748\n      58167.161103\n    \n    \n      3\n      70.686517\n      67.561983\n      0.787\n      2014-09-08 06:42:00\n      55\n      355.472899\n      680.040733\n      1.190909\n      7082.942040\n      3886.893072\n      57574.854667\n      7100.195014\n      3877.501165\n      57561.704322\n      8079.356763\n      28.756578\n      82.011966\n      58138.970542\n    \n    \n      4\n      70.685450\n      67.548317\n      0.337\n      2014-09-08 07:14:00\n      55\n      355.980432\n      680.062802\n      1.190909\n      7086.053455\n      3888.434162\n      57584.748919\n      7102.154616\n      3880.203863\n      57571.538841\n      8082.825855\n      28.755544\n      82.009936\n      58149.250914\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      194\n      67.735100\n      49.503800\n      0.098\n      2014-09-27 11:09:00\n      58\n      314.462546\n      745.632468\n      3.162069\n      9984.190384\n      3989.648532\n      54839.583749\n      10022.560998\n      3970.721884\n      54824.183309\n      10751.806966\n      21.781482\n      78.907336\n      55883.640708\n    \n    \n      195\n      67.735100\n      49.503767\n      0.099\n      2014-09-27 11:25:00\n      39\n      314.463935\n      735.353061\n      3.094872\n      9987.045686\n      3988.615518\n      54838.817622\n      10022.559137\n      3970.716277\n      54824.153874\n      10754.075287\n      21.770726\n      78.904903\n      55883.325362\n    \n    \n      196\n      67.735100\n      49.503667\n      0.100\n      2014-09-27 11:40:00\n      39\n      314.468143\n      735.351634\n      3.094872\n      9986.907471\n      3988.768074\n      54838.723643\n      10022.559815\n      3970.707962\n      54824.114084\n      10754.003515\n      21.771754\n      78.904956\n      55883.219327\n    \n    \n      197\n      67.735100\n      49.503650\n      0.100\n      2014-09-27 11:56:00\n      39\n      314.468858\n      735.351391\n      3.094872\n      9986.789499\n      3988.909547\n      54838.658178\n      10022.560459\n      3970.707276\n      54824.111456\n      10753.946432\n      21.772687\n      78.905001\n      55883.144101\n    \n    \n      198\n      67.735000\n      49.503617\n      0.092\n      2014-09-27 12:11:00\n      39\n      314.470867\n      735.352699\n      3.094872\n      9986.775864\n      3989.044755\n      54838.768736\n      10022.634702\n      3970.733212\n      54824.283845\n      10753.983923\n      21.773383\n      78.904985\n      55883.259807\n    \n  \n\n199 rows √ó 18 columns\n\n\n\nThe previous dataframe (GPS_ResInt), MagGeo has computed the geomagnetic components for each locations and time of your CSV trajectory. Now we will finish up combining the original atributes from your CSV with the annotated results from MagGeo.\n\n%%time\n\noriginalGPSTrack=pd.read_csv(os.path.join(data_dir,gpsfilename))\nMagGeoResult = pd.concat([originalGPSTrack, GeoMagParallelResult], axis=1)\n#Drop duplicated columns. Latitude, Longitued, and DateTime will not be part of the final result.\nMagGeoResult.drop(columns=['Latitude', 'Longitude', 'DateTime'], inplace=True)\nMagGeoResult\n\nCPU times: user 3.91 ms, sys: 1.05 ms, total: 4.95 ms\nWall time: 15.9 ms\n\n\n\n\n\n  \n    \n      \n      timestamp\n      location-long\n      location-lat\n      height\n      individual_id\n      Altitude\n      TotalPoints\n      Minimum_Distance\n      Average_Distance\n      Kp\n      N\n      E\n      C\n      N_Obs\n      E_Obs\n      C_Obs\n      H\n      D\n      I\n      F\n    \n  \n  \n    \n      0\n      08/09/2014 05:54\n      68.307333\n      70.854717\n      0.000\n      1\n      0.000\n      46\n      327.950987\n      665.008368\n      1.308696\n      6949.075221\n      3851.112405\n      57703.184834\n      6970.420967\n      3838.494559\n      57689.934814\n      7944.854510\n      28.994810\n      82.160529\n      58247.560062\n    \n    \n      1\n      08/09/2014 06:10\n      67.975050\n      70.830300\n      0.406\n      1\n      0.406\n      46\n      340.038476\n      667.146029\n      1.308696\n      6985.622920\n      3866.290909\n      57644.882192\n      7006.455690\n      3854.336448\n      57631.552162\n      7984.180169\n      28.962950\n      82.114343\n      58195.185161\n    \n    \n      2\n      08/09/2014 06:26\n      67.752417\n      70.761717\n      0.498\n      1\n      0.498\n      55\n      348.223318\n      678.815409\n      1.190909\n      7035.516299\n      3877.393141\n      57609.773161\n      7053.372261\n      3867.299155\n      57596.673601\n      8033.222713\n      28.859910\n      82.061748\n      58167.161103\n    \n    \n      3\n      08/09/2014 06:42\n      67.561983\n      70.686517\n      0.787\n      1\n      0.787\n      55\n      355.472899\n      680.040733\n      1.190909\n      7082.942040\n      3886.893072\n      57574.854667\n      7100.195014\n      3877.501165\n      57561.704322\n      8079.356763\n      28.756578\n      82.011966\n      58138.970542\n    \n    \n      4\n      08/09/2014 07:14\n      67.548317\n      70.685450\n      0.337\n      1\n      0.337\n      55\n      355.980432\n      680.062802\n      1.190909\n      7086.053455\n      3888.434162\n      57584.748919\n      7102.154616\n      3880.203863\n      57571.538841\n      8082.825855\n      28.755544\n      82.009936\n      58149.250914\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      194\n      27/09/2014 11:09\n      49.503800\n      67.735100\n      0.098\n      2\n      0.098\n      58\n      314.462546\n      745.632468\n      3.162069\n      9984.190384\n      3989.648532\n      54839.583749\n      10022.560998\n      3970.721884\n      54824.183309\n      10751.806966\n      21.781482\n      78.907336\n      55883.640708\n    \n    \n      195\n      27/09/2014 11:25\n      49.503767\n      67.735100\n      0.099\n      2\n      0.099\n      39\n      314.463935\n      735.353061\n      3.094872\n      9987.045686\n      3988.615518\n      54838.817622\n      10022.559137\n      3970.716277\n      54824.153874\n      10754.075287\n      21.770726\n      78.904903\n      55883.325362\n    \n    \n      196\n      27/09/2014 11:40\n      49.503667\n      67.735100\n      0.100\n      2\n      0.100\n      39\n      314.468143\n      735.351634\n      3.094872\n      9986.907471\n      3988.768074\n      54838.723643\n      10022.559815\n      3970.707962\n      54824.114084\n      10754.003515\n      21.771754\n      78.904956\n      55883.219327\n    \n    \n      197\n      27/09/2014 11:56\n      49.503650\n      67.735100\n      0.100\n      2\n      0.100\n      39\n      314.468858\n      735.351391\n      3.094872\n      9986.789499\n      3988.909547\n      54838.658178\n      10022.560459\n      3970.707276\n      54824.111456\n      10753.946432\n      21.772687\n      78.905001\n      55883.144101\n    \n    \n      198\n      27/09/2014 12:11\n      49.503617\n      67.735000\n      0.092\n      2\n      0.092\n      39\n      314.470867\n      735.352699\n      3.094872\n      9986.775864\n      3989.044755\n      54838.768736\n      10022.634702\n      3970.733212\n      54824.283845\n      10753.983923\n      21.773383\n      78.904985\n      55883.259807\n    \n  \n\n199 rows √ó 20 columns"
  },
  {
    "objectID": "ParallelMode.html#export-the-final-results-to-a-csv-file",
    "href": "ParallelMode.html#export-the-final-results-to-a-csv-file",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Export the final results to a CSV file",
    "text": "Export the final results to a CSV file\n\n%%time\n#Exporting the CSV file\noutputfile =\"GeoMagResult_\"+gpsfilename\nexport_csv = MagGeoResult.to_csv (os.path.join(results_dir,outputfile), index = None, header=True)\n\nCPU times: user 6.95 ms, sys: 2.86 ms, total: 9.8 ms\nWall time: 53.7 ms"
  },
  {
    "objectID": "ParallelMode.html#validate-the-results-optional",
    "href": "ParallelMode.html#validate-the-results-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the results (optional)",
    "text": "Validate the results (optional)\nTo validate the results we plot the Fcolumn.\n\n## Creating a copy of the results and setting the Datetime Column as dataframe index.\nValidateDF = GeoMagParallelResult.copy()\nValidateDF.set_index(\"DateTime\", inplace=True)\n## Plotting the F column.\nhist = ValidateDF.hist(column='F')\nplt.title('F distribution')\nplt.xlabel('F in nT')\nplt.ylabel('# of measurements')\n\nText(0, 0.5, '# of measurements')"
  },
  {
    "objectID": "ParallelMode.html#mapping-the-gps-track-using-the-annotated-magnetic-values-optional",
    "href": "ParallelMode.html#mapping-the-gps-track-using-the-annotated-magnetic-values-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Mapping the GPS Track using the annotated Magnetic Values (optional)",
    "text": "Mapping the GPS Track using the annotated Magnetic Values (optional)\nNow we are going to plot the annotated GPS track stored into the MagDataFinal dataframe to see how the different magnetic components in a map to have a better prespective of the impact of the earth magnetic field.\n\nValidateDF.plot(kind=\"scatter\", x=\"Latitude\", y=\"Longitude\",\n    label=\"Magnetic Intensity in nT\",\n    c=\"F\", cmap=plt.get_cmap(\"gist_rainbow\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n    sharex=False #This is only needed to get the x-axis label working due to a current bug in pandas plot.\n)\n\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=10)\nplt.legend(fontsize=12)\nplt.show()\n\n\n\n\n\nimport geopandas\nimport geoplot\nimport hvplot.pandas \ngdf = geopandas.GeoDataFrame(ValidateDF, geometry=geopandas.points_from_xy(ValidateDF.Longitude, ValidateDF.Latitude))\ngdf.head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      \n      Latitude\n      Longitude\n      Altitude\n      TotalPoints\n      Minimum_Distance\n      Average_Distance\n      Kp\n      N\n      E\n      C\n      N_Obs\n      E_Obs\n      C_Obs\n      H\n      D\n      I\n      F\n      geometry\n    \n    \n      DateTime\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2014-09-08 05:54:00\n      70.854717\n      68.307333\n      0.000\n      46\n      327.950987\n      665.008368\n      1.308696\n      6949.075221\n      3851.112405\n      57703.184834\n      6970.420967\n      3838.494559\n      57689.934814\n      7944.854510\n      28.994810\n      82.160529\n      58247.560062\n      POINT (68.30733 70.85472)\n    \n    \n      2014-09-08 06:10:00\n      70.830300\n      67.975050\n      0.406\n      46\n      340.038476\n      667.146029\n      1.308696\n      6985.622920\n      3866.290909\n      57644.882192\n      7006.455690\n      3854.336448\n      57631.552162\n      7984.180169\n      28.962950\n      82.114343\n      58195.185161\n      POINT (67.97505 70.83030)\n    \n    \n      2014-09-08 06:26:00\n      70.761717\n      67.752417\n      0.498\n      55\n      348.223318\n      678.815409\n      1.190909\n      7035.516299\n      3877.393141\n      57609.773161\n      7053.372261\n      3867.299155\n      57596.673601\n      8033.222713\n      28.859910\n      82.061748\n      58167.161103\n      POINT (67.75242 70.76172)\n    \n    \n      2014-09-08 06:42:00\n      70.686517\n      67.561983\n      0.787\n      55\n      355.472899\n      680.040733\n      1.190909\n      7082.942040\n      3886.893072\n      57574.854667\n      7100.195014\n      3877.501165\n      57561.704322\n      8079.356763\n      28.756578\n      82.011966\n      58138.970542\n      POINT (67.56198 70.68652)\n    \n    \n      2014-09-08 07:14:00\n      70.685450\n      67.548317\n      0.337\n      55\n      355.980432\n      680.062802\n      1.190909\n      7086.053455\n      3888.434162\n      57584.748919\n      7102.154616\n      3880.203863\n      57571.538841\n      8082.825855\n      28.755544\n      82.009936\n      58149.250914\n      POINT (67.54832 70.68545)\n    \n  \n\n\n\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - F GeoMag Intensity',\n           geo=True,\n           c='F',\n           tiles='CartoLight',\n           frame_width=700,\n           frame_height=500)\n\nUnable to display output for mime type(s): \n\n\n\n\n\n\n\n\n  \n\n\n\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - I Inclination',\n           geo=True,\n           tiles='CartoLight',\n           c='I',\n           cmap='Viridis',\n           frame_width=700,\n           frame_height=500)\n\nUnable to display output for mime type(s): \n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nax = world.plot(color='white', edgecolor='black', figsize = (12,6))\n\nminx, miny, maxx, maxy = gdf.total_bounds\nax.set_xlim(minx, maxx)\nax.set_ylim(miny, maxy)\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax, column='F', legend=True, \n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\n\nplt.show()\n\n\n\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize = (15,6))\n\nax1 = world.plot(ax=ax1, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax1.set_xlim(xlim)\nax1.set_ylim(ylim)\n\n\ngdf.plot(ax=ax1, column='F', legend=True,\n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\nax1.set_title('Magnetic Intensity - F')\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Longitude')\n\n\nax2 = world.plot( ax=ax2, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\n\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax2, column='D', legend=True, cmap='Spectral', \n         legend_kwds={'label': \" Declination in Degrees\",\n                      'orientation': \"horizontal\"})\nax2.set_title('Declination - D')\nax2.set_xlabel('Latitude')\nax2.set_ylabel('Longitude')\n\nText(567.7954545454544, 0.5, 'Longitude')"
  },
  {
    "objectID": "data_requeriments.html",
    "href": "data_requeriments.html",
    "title": "Data requirements",
    "section": "",
    "text": "üîé Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). If you have a altitude attribute, make sure that the units are in kilometers. Other columns will be ignored. Here it is an example of how your GPS track should looks like.\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook.\n\n\nDataset used as use-case\nMagGeo comes with a dataset for the use case you see in the notebook outputs. This dataset comes from the MoveBank Data Repository (https://www.datarepository.movebank.org/)[1][2].\nWe annotated tracking data of greater white-fronted geese (Anser albifrons), which migrate between northern Germany and the Russian Arctic. We annotated data for fifteen individuals in a single autumn migration (42 days) a total of 973 GPS location.\n[1]K√∂lzsch A, M√ºskens GJDM, Kruckenberg H, Glazov P, Weinzierl R, Nolet BA, Wikelski M (2016) Towards a new understanding of migration timing: slower spring than autumn migration in geese reflects different decision rules for stopover use and departure. Oikos. doi:10.1111/oik.03121\n[2]K√∂lzsch A, Kruckenberg H, Glazov P, M√ºskens GJDM, Wikelski M (2016) Data from: Towards a new understanding of migration timing: slower spring than autumn migration in geese reflects different decision rules for stopover use and departure. Movebank Data Repository. doi:10.5441/001/1.31c2v92f"
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "‚òù Before moving on with MagGeo you might want to take a look at the following concepts:\n\n\nEarth‚Äôs Magnetic Field\n The Earth‚Äôs magnetic field (or geomagnetic field ) is generated in the fluid outer core by a self-exciting dynamo process. Electrical currents flowing in the slowly moving molten iron generate the magnetic field. In addition to sources in the Earth‚Äôs core the magnetic field observable at the Earth‚Äôs surface has sources in the crust and in the ionosphere and magnetosphere.\nThe Earth‚Äôs magnetic field is described by seven components. These are Declination (D), Inclination (I), Horizontal intensity (H), Vertical intensity (Z), total intensity (F) and the north (X) and east (Y) components of the horizontal intensity. In most of the geomagnetic data sources the reference frame used to share the magnetic components is NEC, which is basically the same XYZ cartesian system. By convention, declination is considered positive when measured east of north, Inclination and vertical intensity positive down, X (N) positive north, and Y(E) positive east. The magnetic field observed on Earth is constantly changing.\n¬†\n¬†\n\nThe Earth‚Äôs magnetic field varies both in space and time That is why the relevance of MagGeo helping researchers to understand the variations of the geomagnetic field across an animal movement trajectory. In particular having the annotated geomagnetic components at the the date and time the GPS point was collected. The following image can help you to understand how the geomagnetic components are represented and how they are computed.\n\nConsidering the point of measurement (p) as the origin of a Cartesian system of reference, the x-axis is in the geographic meridian directed to the north, y-axis in the geographic parallel directed to the east and z-axis parallel to the vertical at the point and positive downwards. Then we have:\n\n\n\nequation\n\n\n\n\n\nequation\n\n\nThe unit of magnetic field intensity, strictly flux density, most commonly used in geomagnetism is the Tesla. At the Earth‚Äôs surface the total intensity varies from 22,000 nanotesla (nT) to 67,000 nT. The units of D and I are degrees."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introducction",
    "section": "",
    "text": "Inspired by The Environmental Data Automated Track Annotation System (Env-DATA) Service a tool on Movebank, where ecologists and animal movement researchers all over the world can link movement data with global environmental datasets. Including hundreds of variables from a diverse set of data sources including the European Space Agency (ESA), the National Aeronautics and Space Administration (NASA), the US National Oceanic and Atmospheric Administration (NOAA), and others. EnvData allow researchers to annotate in space and time multiples environmental information to enrich their GPS tracks to analyze the influence of several environmental variables in the trajectory. Using the Env-DATA Track Annotation Service registered users on MoveBank are able to get environmental parameters‚Äîsuch as wind conditions, land use, vegetation, and snow cover‚Äîfor the whole world. Using different interpolation methods users can include multiple environment variables selecting from a comprehensive list of datasets (you can browse the available dataset here).\nThe second element that inspired MagGeo is having a tool to help researcher to get a better understanding over how the earth‚Äôs magnetic field is being used by birds as one of their navigational strategies. Despite of there are several approach in this regards we know still have little knowledge about how birds can use the influence of the magnetic field for their migration patterns, especially for those long-distance migratory animals. Other studies have been reflecting into the magnetic field influence based on magnetic field estimation models, or using some displacement experiments with particular species. The disadvantage of those previous studies is the magnetic field is a highly dynamic force that have different impact around the earth every day. Having said that MagGeo wants to take advantage of what is considered best survey of the geomagnetic field and its temporal evolution - Swarm Constellation. Swarm is a ESA‚Äôs magnetic field mission, launched on 22 November 2013, consists of the three identical Swarm satellites (Alpha, Bravo, and Charlie). Swarm A and C flying side-by-side (1.4¬∞ separation in longitude) at an altitude of 462 km (initial altitude) and Swarm B at higher orbit of 511 km (initial altitude) are equipped with the following set of identical instruments.\nThe data products available from Swarm are Level 1b and Swarm Level 2 products. These products include Swarm magnetic field models, ionospheric and thermospheric products, and others. MagGeo use the Swarm Level 1b data product as the corrected and formatted output from each of the three Swarm satellites. For more information about the Swarm Data Products click here.\nMagGeo has been deployed using a set of Jupyter notebooks a powerful tool to run a python environment. Completely build in python 3.8 MagGeo is a well described program that will guide you through several steps to annotate your GPS trajectories with the geomagnetic field components reported by Swarm. You can access to Swarm Data products via HTTP or FTP using :\n\nvia any HTTP browser at http://swarm-diss.eo.esa.int\ndirectly via an ftp client at ftp://swarm-diss.eo.esa.int\n\nHowever MagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualisation for ESA‚Äôs magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What‚Äôs MagGeo",
    "section": "",
    "text": "MagGeo is a tool that helps ecologists or animal movement researchers to link earth‚Äôs magnetic field data from satellite source to GPS trajectories. Inspired by the Environmental Data Automated Track Annotation System (Env-DATA) Service a tool from Movebank and help researcher to get a better understanding about the geomagnetic variations across the GPS trajectories.\nMagGeo is entirely built-in python and using a set of Jupyter Notebooks that offer several ways to link GPS tracks with the geomagnetic components using the data from one of the up-to-date satellite sources - Swarm Constellation. MagGeo will create an enriched GPS track with the following components:\n\nLatitude from the GPS Track.\nLongitude from the GPS Track.\nTimestamp from the GPS Track.\nMagnetic Field Intensity mapped as Fgps in nanoTeslas (nT).\nN (Northwards) component mapped as N in nanoTeslas (nT).\nE (Eastwards) component mapped as E. in nanoteslas (nT).\nC (Downwards or Center) component mapped as C in nanoTeslas (nT).\nHorizontal component mapped as H in nanoTeslas (nT).\nMagnetic Declination or dip angle mapped as D in degrees\nMagnetic Inclination mapped as I in degrees\nKp Index mapped as kp\nTotal Points as the amount of Swarm measures included in the ST-IDW process from the trajectories requested in the three satellites.\nMinimum Distance mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.\nAverage Distance mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.\n\nResearchers, particularly ecologists now can study the annotated table to analyze the geomagnetic Spatio-temporal variation across any GPS trajectory.\n\nProblems? Suggestions? - Contact us\nMagGeo is work in progress and we are constantly making improvements that you can follow up with the commits made in the pubic GitHub repo. For general enquiries, scientific concepts, suggestions please email: fbenitez@turing.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca\nFor errors, or improvements please submit an issue in this repo, describing the problem you have."
  },
  {
    "objectID": "installation.html#install-miniconda",
    "href": "installation.html#install-miniconda",
    "title": "Installation",
    "section": "1. Install Miniconda",
    "text": "1. Install Miniconda\nRecommended setup if starting without Python already\nInstall Miniconda: https://docs.conda.io/en/latest/miniconda.html"
  },
  {
    "objectID": "installation.html#clone-the-maggeo-repository",
    "href": "installation.html#clone-the-maggeo-repository",
    "title": "Installation",
    "section": "2. Clone the MagGeo repository:",
    "text": "2. Clone the MagGeo repository:\n\nYou will need Git (version control system) to clone MagGeo, install first accordingly (https://git-scm.com/downloads)\n\nOpen a new terminal (MacOS, Linux) or command prompt (Windows) and run:\ngit clone https://github.com/MagGeo/MagGeo-Annotation-Program.git"
  },
  {
    "objectID": "installation.html#change-the-directory",
    "href": "installation.html#change-the-directory",
    "title": "Installation",
    "section": "3. Change the directory",
    "text": "3. Change the directory\nYou will need to change the directory to where you cloned/downloaded the MagGeo repository. If you donwloaded it‚ÄìDo not forget to unzip the folder before using it. If you‚Äôre using the terminal on Linux or macOS, it is the same syntax to change directory.\ncd MagGeo-Annotation-Program"
  },
  {
    "objectID": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "href": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "title": "Installation",
    "section": "4. Create MagGeoEnv environment ‚Äì this should take around five minutes.",
    "text": "4. Create MagGeoEnv environment ‚Äì this should take around five minutes.\nWe have create a new virtual environment for you, thus you can keep MagGeo isolated from other python environment you might have. In the terminal run:\nconda env create --file environment.yml"
  },
  {
    "objectID": "installation.html#activate-maggeoenv",
    "href": "installation.html#activate-maggeoenv",
    "title": "Installation",
    "section": "5. Activate MagGeoEnv",
    "text": "5. Activate MagGeoEnv\nconda activate MagGeoEnv"
  },
  {
    "objectID": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "href": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "title": "Installation",
    "section": "6. Sign Up at VirES for Swarm - VRE and get a web client Token",
    "text": "6. Sign Up at VirES for Swarm - VRE and get a web client Token\nMagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualization for ESA‚Äôs magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models.\n\nFirst to all you need to create an account and Sign up using https://vires.services/oauth/accounts/signup/\nOnce you have created the account, Log In https://vires.services/\nFollow the instructions in https://viresclient.readthedocs.io/en/latest/access_token.html to get your token.\nCopy and Paste your token after ‚Äìtoken in the following command"
  },
  {
    "objectID": "SequentialMode.html#overview",
    "href": "SequentialMode.html#overview",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Overview",
    "text": "Overview\nThis Jupyter Notebook will guide you through the required steps to annotate your GPS tracking data with the earth‚Äôs magnetic field data from Swarm (European Space Agency). This version is called Sequential Mode, alternatively you can use Parallel Mode to take advantage of parallelized computing if required. More information about the Swarm satellites can be found in the Main Document on the MagGeo github repository. This script will use a sequential loop to run the annotation process for each GPS Point (row) from your data.\nTo execute the code, you can go through each cell (pressing Crtl+Enter), you will also find inner comments ## to describe each particular step. If you are not familiar with using Jupyter Notebooks, you might want to take some time to learn how first, for example take a look at the notebook-basics.ipynb Notebook inside MagGeo."
  },
  {
    "objectID": "SequentialMode.html#data-requirements",
    "href": "SequentialMode.html#data-requirements",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Data requirements",
    "text": "Data requirements\n\nüîé Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). Optionally an altitude column can be used providing altitude (the altitude must be in km). Other Columns will be ignored. Here it is an example of how your GPS track should look:\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook."
  },
  {
    "objectID": "SequentialMode.html#import-the-required-python-libraries",
    "href": "SequentialMode.html#import-the-required-python-libraries",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Import the required python libraries",
    "text": "Import the required python libraries\n\nimport datetime as dt\nfrom datetime import timedelta\nimport sys, os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom viresclient import set_token\nsys.path.append(\"..\")\n\nimport utilities\nfrom utilities.MagGeoFunctions import getGPSData\nfrom utilities.MagGeoFunctions import Get_Swarm_residuals\nfrom utilities.MagGeoFunctions import ST_IDW_Process\nfrom utilities.MagGeoFunctions import CHAOS_ground_values"
  },
  {
    "objectID": "SequentialMode.html#add-your-vires-web-client-token",
    "href": "SequentialMode.html#add-your-vires-web-client-token",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Add your VirES web client Token",
    "text": "Add your VirES web client Token\nThe VirES client API, requires a token. Before start you need to get your own VirES token. You can visit https://vires.services/ to get yours, and then add it into the next cell.\n\nset_token(\"https://vires.services/ows\", set_default=True)"
  },
  {
    "objectID": "SequentialMode.html#read-the-gps-track",
    "href": "SequentialMode.html#read-the-gps-track",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Read the GPS track",
    "text": "Read the GPS track\nThe following steps will load the GPS track from a csv file, and set some requirements before downloading geomagnetic data from Swarm. If your csv track file doesnt not have any altitude attribute, MagGeo will use sea level as your altitude (i.e., 0 Km). Altitude column units must be Km\n\nbase_dir=os.path.dirname(os.getcwd())\ntemp_results_dir = os.path.join(base_dir, \"temp_data\")\nresults_dir = os.path.join(base_dir, \"results\")\ndata_dir = os.path.join(base_dir, \"data\")\nutilities_dir = os.path.join(base_dir, \"utilities\")\n\n\n# Make sure the csv file of your trackectory is stored in the Data folder.\n# Enter the name of your GPS track csv file including the extension .csv  and press Enter (e.g. BirdGPSTrajectory.csv)\n# Make sure you have a columnn that integrates date and time, before include in MagGeo.\n# If your csv track file does not have any altitude attribute, MagGeo will use sea level as your altitude (i.e. 0 Km).\n# i.e height (Only in KM)\ngpsfilename= \"BirdGPSTrajectoryTest.csv\"\nLat=\"location-lat\"\nLong=\"location-long\"\nDateTime=\"timestamp\"\naltitude = \"height\"\n\n\n# Here MagGeo is reading your CSV file, taking the Lat, Long, Date&Time and Altitutes attributes and compute, some aditional attrubutes we need to the annotation process.\n# Setting the date and time attributes for the required format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated.\nGPSData = getGPSData(data_dir,gpsfilename,Lat,Long,DateTime,altitude)\nGPSData"
  },
  {
    "objectID": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "href": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the correct amount of Swarm measures",
    "text": "Validate the correct amount of Swarm measures\nThe following loop is identifiying the time and validating if the time is less than 4:00 hours and more than 20:00 hours to bring one extra day of data. The result of this validation is written in an empty python list which will be later validated to get the unique dates. This avoids duplicate downloading of data for the same day and reduces overall computational time.\n\ndatestimeslist = []\nfor index, row in GPSData.iterrows():\n    datetimerow  = row['gpsDateTime']\n    daterow = row['dates']\n    hourrow = row['times']\n    hourrow = hourrow.strftime('%H:%M:%S')\n    if hourrow < '04:00:00':\n        date_bfr = daterow - (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(date_bfr)\n    if hourrow > '20:00:00':\n        Date_aft = daterow + (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(Date_aft)  \n    else:\n        datestimeslist.append(daterow)\n\nGetting a list of unique dates to download the Swarm Data\n\ndef uniquelistdates(list): \n    x = np.array(list) \n    uniquelist = np.unique(x)\n    return uniquelist\n\nuniquelist_dates = uniquelistdates(datestimeslist)\nuniquelist_dates"
  },
  {
    "objectID": "SequentialMode.html#download-swarm-residuals-data",
    "href": "SequentialMode.html#download-swarm-residuals-data",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Download Swarm residuals data",
    "text": "Download Swarm residuals data\nOnce the date and time columns have been defined and the unique dates are identified the script can start the download process. Usually the data from Swarm is requested using only one satellite, however MagGeo will use the magnetic measures from the three satellite of the Swarm Mission (Alpha, Bravo, Charlie). Be aware satellite Charlie, got its AMS broken earlier in the mission, although the initial dates still have valid data MagGeo can use.\n\nüìò Be aware: Due to the amount of dates in the demo GPS track (42 days), the time to process the sample data will take approximately 10 minutes. Unfortunatly the download process migth be a slow process, particually for the magnetic models data MagGeo requieres.\n\nSet a connection to the VirES client and using the function Get_Swarm_residuals we will get the swarm residuals for the dates included in the previous list.\n\n%%time\n\nhours_t_day = 24 #MagGeo needs the entire Swarm data for each day of the identified day.\nhours_added = dt.timedelta(hours = hours_t_day)\n\nlistdfa = []\nlistdfb = []\nlistdfc = []\n\nfor d in tqdm(uniquelist_dates, desc=\"Getting Swarm Data\"):\n    #print(\"Getting Swarm data for date:\",d )\n    startdate = dt.datetime.combine(d, dt.datetime.min.time())\n    enddate = startdate + hours_added\n    SwarmResidualsA,SwarmResidualsB,SwarmResidualsC = Get_Swarm_residuals(startdate, enddate)\n    listdfa.append(SwarmResidualsA)\n    listdfb.append(SwarmResidualsB)\n    listdfc.append(SwarmResidualsC)\n\nConcat the previous results and temporally save the requested data locally: Integrate the previous list for all dates, into pandas dataframes. We will temporally saved the previous results, in case you need to re-run MagGeo, with the following csv files you will not need to run the download process.\n\n%%time\n\nPdSwarmRes_A = pd.concat(listdfa, join='outer', axis=0)\nPdSwarmRes_A.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_A.csv'), header=True)\nPdSwarmRes_B = pd.concat(listdfb, join='outer', axis=0)\nPdSwarmRes_B.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_B.csv'), header=True)\nPdSwarmRes_C = pd.concat(listdfc, join='outer', axis=0)\nPdSwarmRes_C.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_C.csv'), header=True)\n\nTotalSwarmRes_A = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_A.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_A['timestamp'] = pd.to_datetime(TotalSwarmRes_A['timestamp'])\nTotalSwarmRes_B = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_B.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_B['timestamp'] = pd.to_datetime(TotalSwarmRes_B['timestamp'])\nTotalSwarmRes_C = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_C.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_C['timestamp'] = pd.to_datetime(TotalSwarmRes_C['timestamp'])\n\nTotalSwarmRes_A.head(10) #If you need to take a look of the Swarm Data, you can print TotalSwarmRes_B, or TotalSwarmRes_C"
  },
  {
    "objectID": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "href": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Spatio-Temporal filter and interpolation process (ST-IDW)",
    "text": "Spatio-Temporal filter and interpolation process (ST-IDW)\nOnce we have requested the swarm data, now we need to filter in space and time the available points to compute the magnetic values (NEC frame) for each GPS point based on its particular date and time. The function ST_IDW_Process takes the GPS track and the downloaded data from swarm to filter in space and time based on the criteria defined in our method. With the swarm data filtered we interpolate (IDW) the NEC components for each GPS data point.\n\n%%time\n#Sequential mode, applying a traditional loop using iterrows.\nif __name__ == '__main__':\n    dn = [] ## List used to add all the GPS points with the annotated MAG Data. See the last bullet point of this process        \n    for index, row in tqdm(GPSData.iterrows(), total=GPSData.shape[0], desc=\"Annotating the GPS Trayectory\"):\n        GPSLat = row['gpsLat']\n        GPSLong = row['gpsLong']\n        GPSDateTime = row['gpsDateTime']\n        GPSTime = row['epoch']\n        GPSAltitude = row['gpsAltitude']\n        #print(\"Process for:\", index,\"DateTime:\",GPSDateTime)\n        try:\n            result=ST_IDW_Process(GPSLat,GPSLong,GPSAltitude, GPSDateTime,GPSTime, TotalSwarmRes_A, TotalSwarmRes_B, TotalSwarmRes_C)\n            dn.append(result)\n        except:\n            #print(\"Ups!.That was a bad Swarm Point, let's keep working with the next point\")\n            result_badPoint= {'Latitude': GPSLat, 'Longitude': GPSLong, 'Altitude':GPSAltitude, 'DateTime': GPSDateTime, 'N_res': np.nan, 'E_res': np.nan, 'C_res':np.nan, 'TotalPoints':0, 'Minimum_Distance':np.nan, 'Average_Distance':np.nan}  \n            dn.append(result_badPoint)\n            continue\n\nTemporally save the ST-IDW result locally. Still MagGeo needs to run the calculation of geomagnetic components, brining the magnetic values at the altitude provided for your GPS track.\n\nGPS_ResInt = pd.DataFrame(dn)\nGPS_ResInt.to_csv (os.path.join(temp_results_dir,\"GPS_ResInt.csv\"), header=True)\nGPS_ResInt"
  },
  {
    "objectID": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "href": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Compute the magnetic components at the trajectory altitute using CHAOS model",
    "text": "Compute the magnetic components at the trajectory altitute using CHAOS model\nThe function CHAOS_ground_values is used to run the calculation of magnetic components. This adjustment requeries the magnetic components at the trajectory altitude (or at the ground level) using CHAOS (theta, phi, radial). This process also further conducts the rotation and transformation between a geocentric earth-based reference system (CHAOS) and geodetic earth-based reference system (GPS track). Once the corrected values are calculated the non-necesary columns are removed. For more information about this process go to the Main Notebook.\n\n%%time\nX_obs, Y_obs, Z_obs, X_obs_internal, Y_obs_internal, Z_obs_internal =CHAOS_ground_values(utilities_dir,GPS_ResInt)\nGPS_ResInt['N'] =pd.Series(X_obs)\nGPS_ResInt['E'] =pd.Series(Y_obs)\nGPS_ResInt['C'] =pd.Series(Z_obs)\nGPS_ResInt['N_Obs'] =pd.Series(X_obs_internal)\nGPS_ResInt['E_Obs'] =pd.Series(Y_obs_internal)\nGPS_ResInt['C_Obs'] =pd.Series(Z_obs_internal)\n\nGPS_ResInt.drop(columns=['N_res', 'E_res','C_res'], inplace=True)\nGPS_ResInt"
  },
  {
    "objectID": "SequentialMode.html#the-final-result",
    "href": "SequentialMode.html#the-final-result",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "The final result",
    "text": "The final result\nWith the NEC components for each GPS Track point, it is possible to compute the aditional magnetic components. For more information about the magnetic components and their relevance go to the main paper or notebook.\n\n<strong>üìò The annotated dataframe will include the following attributes:</strong> If you need more information about how the geomagnetic components are described go to the main MagGeo Notebook (Add Link).\n<ul>\n  <li><strong>Latitude</strong> from the GPS Track.</li>\n  <li><strong>Longitude</strong> from the GPS Track.</li>\n  <li><strong>Timestamp</strong> from the GPS Track.</li>\n  <li><strong>Magnetic Field Intensity</strong>  mapped as Fgps in nanoTeslas (nT).</li>\n  <li><strong>N (Northwards) component</strong> mapped as N in nanoTeslas (nT).</li>\n  <li><strong>E (Eastwards) component</strong> mapped as E. in nanoteslas (nT).</li>\n  <li><strong>C (Downwards or Center)</strong> component mapped as C in nanoTeslas (nT).</li>\n  <li><strong>Horizontal component</strong> mapped as H in nanoTeslas (nT).</li>\n  <li><strong>Magnetic Inclination </strong> mapped as I in degrees.</li> \n  <li><strong>Magnetic Declination or dip angle</strong> mapped as D in degrees</li>\n  <li><strong>Kp Index</strong> mapped as kp</li>\n  <li><strong>Total Points</strong> as the amount of Swarm points included in the ST-IDW process from the three satellites.</li>\n  <li><strong>Minimum Distance</strong> mapped as MinDist, representing the minimum distance from a Swarm points and each GPS point location.</li>\n  <li><strong>Average Distance</strong> mapped as AvDist, representing the average distance between the Swarm points and the GPS point location.</li>\n</ul>\n\n\n%%time\n# Having Intepolated and weighted the magnetic values, we can compute the other magnectic components. \nGPS_ResInt['H'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2))\n#check the arcgtan in python., From arctan2 is saver.\nDgpsRad = np.arctan2(GPS_ResInt['E'],GPS_ResInt['N'])\nGPS_ResInt['D'] = np.degrees(DgpsRad)\nIgpsRad = np.arctan2(GPS_ResInt['C'],GPS_ResInt['H'])\nGPS_ResInt['I'] = np.degrees(IgpsRad)\nGPS_ResInt['F'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2)+(GPS_ResInt['C']**2))\nGPS_ResInt\n\nThe previous dataframe (GPS_ResInt), MagGeo has computed the geomagnetic components for each locations and time of your CSV trajectory. Now we will finish up combining the original atributes from your CSV with the annotated results from MagGeo.\n\n%%time\noriginalGPSTrack=pd.read_csv(os.path.join(data_dir,gpsfilename))\nMagGeoResult = pd.concat([originalGPSTrack, GPS_ResInt], axis=1)\n#Drop duplicated columns. Latitude, Longitued, and DateTime will not be part of the final result.\nMagGeoResult.drop(columns=['Latitude', 'Longitude', 'DateTime'], inplace=True)\nMagGeoResult"
  },
  {
    "objectID": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "href": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Export the final results to a CSV file",
    "text": "Export the final results to a CSV file\n\n%%time\n#Exporting the CSV file\noutputfile =\"GeoMagResult_\"+gpsfilename\nexport_csv = MagGeoResult.to_csv (os.path.join(results_dir,outputfile), index = None, header=True)"
  },
  {
    "objectID": "SequentialMode.html#validate-the-results-optional",
    "href": "SequentialMode.html#validate-the-results-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Validate the results ( Optional)",
    "text": "Validate the results ( Optional)\nTo validate the results we plot the Fgpscolumn.\n\n## Creating a copy of the results and setting the Datetime Column as dataframe index.\nValidateDF = GPS_ResInt.copy()\nValidateDF.set_index(\"DateTime\", inplace=True)\n## Plotting the F column.\nhist = ValidateDF.hist(column='F')\nplt.title('F distribution')\nplt.xlabel('F in nT')\nplt.ylabel('# of measurements')"
  },
  {
    "objectID": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "href": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "Map the GPS Track using the annotated Magnetic Values (Optional)",
    "text": "Map the GPS Track using the annotated Magnetic Values (Optional)\nNow we are going to plot the annotated GPS track stored into the MagDataFinal dataframe to see the different magnetic components in a map to have a better prespective of the impact of the earth magnetic field.\n\nValidateDF.plot(kind=\"scatter\", x=\"Latitude\", y=\"Longitude\",\n    label=\"Magnetic Intensity in nT\",\n    c=\"F\", cmap=plt.get_cmap(\"gist_rainbow\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n    sharex=False #This is only needed to get the x-axis label working due to a current bug in pandas plot.\n    \n)\n\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\nplt.legend(fontsize=12)\nplt.show()\n\n\nimport geopandas\nimport geoplot\nimport hvplot.pandas\ngdf = geopandas.GeoDataFrame(ValidateDF, geometry=geopandas.points_from_xy(ValidateDF.Longitude, ValidateDF.Latitude))\ngdf.head()\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - F GeoMag Intensity',\n           geo=True,\n           c='F',\n           tiles='CartoLight',\n           frame_width=700,\n           frame_height=500)\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - I Inclination',\n           geo=True,\n           tiles='CartoLight',\n           c='I',\n           cmap='Viridis',\n           frame_width=700,\n           frame_height=500)\n\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\nax = world.plot(color='white', edgecolor='gray', figsize = (18,8))\n\nminx, miny, maxx, maxy = gdf.total_bounds\nax.set_xlim(minx, maxx)\nax.set_ylim(miny, maxy)\n\ngdf.plot(ax=ax, column='F', legend=True, \n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\n\nplt.show()\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize = (18,8))\n\nax1 = world.plot(ax=ax1, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax1.set_xlim(xlim)\nax1.set_ylim(ylim)\n\n\ngdf.plot(ax=ax1, column='F', legend=True,\n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\nax1.set_title('Magnetic Intensity - F')\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Longitude')\n\n\nax2 = world.plot( ax=ax2, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\n\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax2, column='I', legend=True, cmap='Spectral', \n         legend_kwds={'label': \" Inclination in Degrees\",\n                      'orientation': \"horizontal\"})\nax2.set_title('Inclination - I')\nax2.set_xlabel('Latitude')\nax2.set_ylabel('Longitude')"
  }
]