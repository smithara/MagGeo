[
  {
    "objectID": "using_maggeo.html",
    "href": "using_maggeo.html",
    "title": "Using MagGeo",
    "section": "",
    "text": "1. Run MagGeo using the sample data.\nMagGeo can be excuted using the same terminal you have been using in the previous steps. If you want to get familiar with MagGeo and get an annotated GPS trajectory using the data we have included as an example (data folder), run the following command (replace your virES token where is requiered):\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\nNow MagGeo will start to download the Swarm Data.\n\n\n\nimg\n\n\nOnce the data has been downloaded, MagGeo will process it to make the annotation process ( for more information about how this is done, visit our methodological paper in Movement Ecology)\nThe last step MagGeo does is annotating the gathered data, that would take more time depending how big is your dataset. In our example it only takes 4 seconds.\n\n\n\nimg\n\n\nAnd Congrats you got annotated data. The results will be stored in the folder results for your futher analysis. You will find a .csv file named like GeoMagResult_+name_of_your_csv_file_trajectory.\n\n\n2. Run MagGeo using your data.\nIf you are ready to annotate your GPS trajectories. You need to update the parameters file in MagGeo to let the program know what are the correct values of your data.\n\nCopy the csv file with your trajectories into the data folder.\nOpen and Update the following parameters in the file default.yml located in parameters folder:\ngpsfilename: \"name_of_your_trajectory.cvs\" Include the name of your Input data. The GPS trajectory you need to annotate with the geomagnetic satellite data.\nLat: \"latitude_column_name_in_your_trajectory\"\nLong: \"longitude_column_name_in_your_trajectory\"\nDateTime: \"Date_Time_column_name_in_your_trajectory\" make sure you have one column that includes Date and Time values together.\naltitude: \"altitude_column_name_in_your_trajectory\" if you do not have any altitute column, you can leave that in blank, including only \"\"\n\nSave your changes, return to the Terminal and run:\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\n\n\n3. Run MagGeo step by step, using Jupyter Notebook.\nMagGeo includes a set of Jupyter Notebooks, you will find four notebooks (.ipynp) in the Notebooks folder.\n\nIn a Terminal, make sure you are using MagGeoEnv environment, and run:\n\njupyter notebook\nA Jupyter Notebook dashboard will comes out in your browser locally (e.g. http://localhost:8888) then you can explore MagGeo and its content. Go to Notebooks folder and open any of the following notebook for a step by step process. You can add cells to make your own test or analysis, but be aware that any change you do at the code migth affects the correct performance of the program.\n\n\n\nimg\n\n\n\n\nMain Notebook : An initial and descriptive notebook where you can get detail information about MagGeo, the sample data used, background concepts and software requirements.\nSequential Mode: Annotation Notebook applying a sequential mode. Using a traditional loop to going through the GPS track rows and process every row computing the magnetic components. Particularly useful for small datasets.\nParallel Mode: If you have a “big” dataset ( e.g. 1 million of records) you might want try the parallel mode. The parallel mode has some differences when you run the required libraries in a windows or Linux environment. We have tested MagGeo in a windows server environment.\nNotebook basics: If you are not familiar with Jupiter Notebooks and want to learn about the basics over how to run the notebooks before try the annotate tool. You can try this notebook to get the basics elements to run cells, read data, and plot some a basic chart.\n\n\nThe following image will help you to understand how the sequential and parallel mode differ, and how in parallel mode you should be able to use the full capacity of your machine. However it is quite important to identify when we need to use a parallel mode. For small datasets running MagGeo in Parallel mode could be even slower than the sequential mode."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "Command prompt does not find conda: After step No 3, windows users do not find conda command.\nCause: The miniconda/anaconda path is not included in your %PATH environment\nSolution: Add miniconda path to Windows environment. Instructions: https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\nUsually located in C:\\ProgramData\\Miniconda3\\condabin You should search for file conda.bat and copy the path where this file is.\nPython not found: Before step step 7, for windows users in some cases python command is not found.\nCause: In some cases for windows users, when python is installed using MagGeoEnv, the path is not included. Solution: Add the conda python path to your environment\nC:\\ProgramData\\Miniconda3"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": " MagGeo: Data fusion tool to combine magnetic data with GPS trajectories",
    "section": "",
    "text": "What’s MagGeo\n\nMagGeo is a tool that helps ecologists or animal movement researchers to link earth’s magnetic field data from satellite source to GPS trajectories. Inspired by the Environmental Data Automated Track Annotation System (Env-DATA) Service a tool from Movebank and help researcher to get a better understanding about the geomagnetic variations across the GPS trajectories.\nMagGeo is entirely built-in python and using a set of Jupyter Notebooks that offer several ways to link GPS tracks with the geomagnetic components using the data from one of the up-to-date satellite sources - Swarm Constellation. MagGeo will create an enriched GPS track with the following components:\n\nLatitude from the GPS Track.\nLongitude from the GPS Track.\nTimestamp from the GPS Track.\nMagnetic Field Intensity mapped as Fgps in nanoTeslas (nT).\nN (Northwards) component mapped as N in nanoTeslas (nT).\nE (Eastwards) component mapped as E. in nanoteslas (nT).\nC (Downwards or Center) component mapped as C in nanoTeslas (nT).\nHorizontal component mapped as H in nanoTeslas (nT).\nMagnetic Declination or dip angle mapped as D in degrees\nMagnetic Inclination mapped as I in degrees\nKp Index mapped as kp\nTotal Points as the amount of Swarm measures included in the ST-IDW process from the trajectories requested in the three satellites.\nMinimum Distance mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.\nAverage Distance mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.\n\nResearchers, particularly ecologists now can study the annotated table to analyze the geomagnetic Spatio-temporal variation across any GPS trajectory.\n\n\nProblems? Suggestions? - Contact us\nMagGeo is work in progress and we are constantly making improvements that you can follow up with the commits made in the pubic GitHub repo. For general enquiries, scientific concepts, suggestions please email: fbenitez@turing.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca\nFor errors, or improvements please submit an issue in this repo, describing the problem you have."
  },
  {
    "objectID": "installation.html#install-miniconda",
    "href": "installation.html#install-miniconda",
    "title": "Installation",
    "section": "1. Install Miniconda",
    "text": "1. Install Miniconda\nRecommended setup if starting without Python already\nInstall Miniconda: https://docs.conda.io/en/latest/miniconda.html"
  },
  {
    "objectID": "installation.html#clone-the-maggeo-repository",
    "href": "installation.html#clone-the-maggeo-repository",
    "title": "Installation",
    "section": "2. Clone the MagGeo repository:",
    "text": "2. Clone the MagGeo repository:\n\nYou will need Git (version control system) to clone MagGeo, install first accordingly (https://git-scm.com/downloads)\n\nOpen a new terminal (MacOS, Linux) or command prompt (Windows) and run:\ngit clone https://github.com/MagGeo/MagGeo-Annotation-Program.git"
  },
  {
    "objectID": "installation.html#change-the-directory",
    "href": "installation.html#change-the-directory",
    "title": "Installation",
    "section": "3. Change the directory",
    "text": "3. Change the directory\nYou will need to change the directory to where you cloned/downloaded the MagGeo repository. If you donwloaded it–Do not forget to unzip the folder before using it. If you’re using the terminal on Linux or macOS, it is the same syntax to change directory.\ncd MagGeo-Annotation-Program"
  },
  {
    "objectID": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "href": "installation.html#create-maggeoenv-environment-this-should-take-around-five-minutes.",
    "title": "Installation",
    "section": "4. Create MagGeoEnv environment – this should take around five minutes.",
    "text": "4. Create MagGeoEnv environment – this should take around five minutes.\nWe have create a new virtual environment for you, thus you can keep MagGeo isolated from other python environment you might have. In the terminal run:\nconda env create --file environment.yml"
  },
  {
    "objectID": "installation.html#activate-maggeoenv",
    "href": "installation.html#activate-maggeoenv",
    "title": "Installation",
    "section": "5. Activate MagGeoEnv",
    "text": "5. Activate MagGeoEnv\nconda activate MagGeoEnv"
  },
  {
    "objectID": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "href": "installation.html#sign-up-at-vires-for-swarm---vre-and-get-a-web-client-token",
    "title": "Installation",
    "section": "6. Sign Up at VirES for Swarm - VRE and get a web client Token",
    "text": "6. Sign Up at VirES for Swarm - VRE and get a web client Token\nMagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualization for ESA’s magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models.\n\nFirst to all you need to create an account and Sign up using https://vires.services/oauth/accounts/signup/\nOnce you have created the account, Log In https://vires.services/\nFollow the instructions in https://viresclient.readthedocs.io/en/latest/access_token.html to get your token.\nCopy and Paste your token after –token in the following command"
  }
]